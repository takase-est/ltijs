{"version":3,"file":"Provider.js","names":["Server","Request","Platform","Auth","DB","Keyset","GradeService","DeepLinkingService","NamesAndRolesService","DynamicRegistration","url","jwt","crypto","debug","provAuthDebug","provMainDebug","provDynamicRegistrationDebug","_loginRoute","_classPrivateFieldLooseKey","_appRoute","_keysetRoute","_dynRegRoute","_whitelistedRoutes","_ENCRYPTIONKEY2","_devMode","_ltiaas","_tokenMaxAge","_cookieOptions","_setup","_connectCallback2","_deepLinkingCallback2","_dynamicRegistrationCallback2","_sessionTimeoutCallback2","_invalidTokenCallback2","_unregisteredPlatformCallback2","_inactivePlatformCallback2","_keyset","_server","Provider","constructor","Object","defineProperty","writable","value","secure","httpOnly","signed","token","req","res","next","query","openid_configuration","status","send","error","details","message","register","registration_token","setHeader","err","locals","keyset","build","Database","_classPrivateFieldLooseBase","setup","encryptionkey","database","options","Error","https","ssl","key","cert","dynReg","name","plugin","appRoute","appUrl","loginRoute","loginUrl","keysetRoute","keysetUrl","dynRegRoute","devMode","ltiaas","tokenMaxAge","undefined","cookies","sameSite","domain","cors","serverAddon","app","Grade","getPlatform","DeepLinking","NamesAndRoles","routes","registerPlatform","staticPath","setStaticPath","sessionValidator","baseUrl","path","ltik","signedCookies","idtoken","body","id_token","state","validationCookie","validationParameters","iss","maxAge","valid","validateToken","savedState","Get","clearCookie","Delete","courseId","id","resourceId","clientId","deploymentId","additionalContextProperties","roles","targetLinkUri","custom","launchPresentation","endpoint","namesRoles","hashOfAdditionalContextProperties","createHash","update","JSON","stringify","digest","contextId","encodeURIComponent","platformCode","Buffer","from","toString","platformToken","user","sub","userInfo","given_name","family_name","email","platformInfo","platformId","Replace","contextToken","context","resource","messageType","version","deepLinkingSettings","lis","cookie","newLtikObj","platformUrl","s","newLtik","sign","entries","parse","platformContext","URLSearchParams","append","urlSearchParams","redirect","find","r","route","RegExp","test","method","toUpperCase","description","bodyReceived","validLtik","verify","cookieUser","idTokenRes","idToken","use","all","params","login_hint","target_link_uri","client_id","platform","platformActive","randomBytes","includes","rawQueries","split","queries","Insert","cookieOptions","ltiAdvantageLogin","format","pathname","platformAuthEndpoint","get","deploy","conf","port","silent","serverless","console","log","listen","process","on","close","exit","Close","onConnect","_connectCallback","sessionTimeout","invalidToken","toLowerCase","onDeepLinking","_deepLinkingCallback","onDynamicRegistration","_dynamicRegistrationCallback","onSessionTimeout","_sessionTimeoutCallback","onInvalidToken","_invalidTokenCallback","onUnregisteredPlatform","_unregisteredPlatformCallback","onInactivePlatform","_inactivePlatformCallback","whitelist","formattedRoutes","isObject","push","ENCRYPTIONKEY","_Database","_ENCRYPTIONKEY","_getPlatform","kid","_platform","authenticationEndpoint","accesstokenEndpoint","authConfig","generatePlatformKeyPair","plat","authorizationServer","platformName","authEndpoint","Modify","platformAccessTokenEndpoint","platformAuthorizationServer","platformAuthConfig","result","platforms","getPlatformById","updatePlatformById","oldURL","oldClientId","platformClientId","alteredUrlClientIdFlag","deletePlatform","delete","deletePlatformById","getAllPlatforms","pathParts","additionalQueries","newResource","isNewResource","search","portMatch","match","join","formattedPath","protocol","hostname","auth","hash","provider"],"sources":["../../../src/esm/Provider/Provider.js"],"sourcesContent":["/* eslint-disable require-atomic-updates */\n/* eslint-disable no-useless-escape */\n\n/* Main class for the Provider functionalities */\n\nimport Server from '../Utils/Server.js'\nimport Request from '../Utils/Request.js'\nimport Platform from '../Utils/Platform.js'\nimport Auth from '../Utils/Auth.js'\nimport DB from '../Utils/Database.js'\nimport Keyset from '../Utils/Keyset.js'\n\nimport GradeService from './Services/Grade.js'\nimport DeepLinkingService from './Services/DeepLinking.js'\nimport NamesAndRolesService from './Services/NamesAndRoles.js'\nimport DynamicRegistration from './Services/DynamicRegistration.js'\n\nimport url from 'fast-url-parser'\nimport jwt from 'jsonwebtoken'\nimport crypto from 'crypto'\nimport debug from 'debug'\n\nconst provAuthDebug = debug('provider:auth')\nconst provMainDebug = debug('provider:main')\nconst provDynamicRegistrationDebug = debug('provider:dynamicRegistrationService')\n\n/**\n * @descripttion LTI Provider Class that implements the LTI 1.3 protocol and services.\n */\nclass Provider {\n  // Pre-initiated variables\n  #loginRoute = '/login'\n\n  #appRoute = '/'\n\n  #keysetRoute = '/keys'\n\n  #dynRegRoute = '/register'\n\n  #whitelistedRoutes = []\n\n  #ENCRYPTIONKEY\n\n  #devMode = false\n  #ltiaas = false\n\n  #tokenMaxAge = 10\n\n  #cookieOptions = {\n    secure: false,\n    httpOnly: true,\n    signed: true\n  }\n\n  // Setup flag\n  #setup = false\n\n  #connectCallback = async (token, req, res, next) => { return next() }\n\n  #deepLinkingCallback = async (token, req, res, next) => { return next() }\n\n  #dynamicRegistrationCallback = async (req, res, next) => {\n    try {\n      if (!req.query.openid_configuration) return res.status(400).send({ status: 400, error: 'Bad Request', details: { message: 'Missing parameter: \"openid_configuration\".' } })\n      const message = await this.DynamicRegistration.register(req.query.openid_configuration, req.query.registration_token)\n      res.setHeader('Content-type', 'text/html')\n      res.send(message)\n    } catch (err) {\n      provDynamicRegistrationDebug(err)\n      if (err.message === 'PLATFORM_ALREADY_REGISTERED') return res.status(403).send({ status: 403, error: 'Forbidden', details: { message: 'Platform already registered.' } })\n      return res.status(500).send({ status: 500, error: 'Internal Server Error', details: { message: err.message } })\n    }\n  }\n\n  #sessionTimeoutCallback = async (req, res) => {\n    return res.status(401).send(res.locals.err)\n  }\n\n  #invalidTokenCallback = async (req, res) => {\n    return res.status(401).send(res.locals.err)\n  }\n\n  #unregisteredPlatformCallback = async (req, res) => {\n    return res.status(400).send({ status: 400, error: 'Bad Request', details: { message: 'UNREGISTERED_PLATFORM' } })\n  }\n\n  #inactivePlatformCallback = async (req, res) => {\n    return res.status(401).send({ status: 401, error: 'Unauthorized', details: { message: 'PLATFORM_NOT_ACTIVATED' } })\n  }\n\n  // Assembles and sends keyset\n  #keyset = async (req, res) => {\n    try {\n      const keyset = await Keyset.build(this.Database, this.#ENCRYPTIONKEY)\n      return res.status(200).send(keyset)\n    } catch (err) {\n      provMainDebug(err)\n      return res.status(500).send({ status: 500, error: 'Internal Server Error', details: { message: err.message } })\n    }\n  }\n\n  #server\n\n  /**\n     * @description Provider configuration method.\n     * @param {String} encryptionkey - Secret used to sign cookies and encrypt other info.\n     * @param {Object} database - Database configuration.\n     * @param {String} database.url - Database Url (Ex: mongodb://localhost/applicationdb).\n     * @param {Object} [database.plugin] - If set, must be the Database object of the desired database plugin.\n     * @param {Boolean} [database.debug] - If set to true, enables mongoose debug mode.\n     * @param {Object} [database.connection] - MongoDB database connection options (Ex: user, pass)\n     * @param {String} [database.connection.user] - Database user for authentication if needed.\n     * @param {String} [database.conenction.pass] - Database pass for authentication if needed.\n     * @param {Object} [options] - Lti Provider options.\n     * @param {String} [options.appRoute = '/'] - Lti Provider main route. If no option is set '/' is used.\n     * @param {String} [options.loginRoute = '/login'] - Lti Provider login route. If no option is set '/login' is used.\n     * @param {String} [options.keysetRoute = '/keys'] - Lti Provider public jwk keyset route. If no option is set '/keys' is used.\n     * @param {String} [options.dynRegRoute = '/register'] - Dynamic registration route.\n     * @param {Boolean} [options.https = false] - Set this as true in development if you are not using any web server to redirect to your tool (like Nginx) as https and are planning to configure ssl through Express.\n     * @param {Object} [options.ssl] - SSL certificate and key if https is enabled.\n     * @param {String} [options.ssl.key] - SSL key.\n     * @param {String} [options.ssl.cert] - SSL certificate.\n     * @param {String} [options.staticPath] - The path for the static files your application might serve (Ex: _dirname+\"/public\")\n     * @param {Boolean} [options.cors = true] - If set to false, disables cors.\n     * @param {Function} [options.serverAddon] - Allows the execution of a method inside of the server contructor. Can be used to register middlewares.\n     * @param {Object} [options.cookies] - Cookie configuration. Allows you to configure, sameSite and secure parameters.\n     * @param {Boolean} [options.cookies.secure = false] - Cookie secure parameter. If true, only allows cookies to be passed over https.\n     * @param {String} [options.cookies.sameSite = 'Lax'] - Cookie sameSite parameter. If cookies are going to be set across domains, set this parameter to 'None'.\n     * @param {String} [options.cookies.domain] - Cookie domain parameter. This parameter can be used to specify a domain so that the cookies set by Ltijs can be shared between subdomains.\n     * @param {Boolean} [options.devMode = false] - If true, does not require state and session cookies to be present (If present, they are still validated). This allows ltijs to work on development environments where cookies cannot be set. THIS SHOULD NOT BE USED IN A PRODUCTION ENVIRONMENT.\n     * @param {Number} [options.tokenMaxAge = 10] - Sets the idToken max age allowed in seconds. Defaults to 10 seconds. If false, disables max age validation.\n     * @param {Object} [options.dynReg] - Setup for the Dynamic Registration Service.\n     * @param {String} [options.dynReg.url] - Tool Provider main URL. (Ex: 'https://tool.example.com')\n     * @param {String} [options.dynReg.name] - Tool Provider name. (Ex: 'Tool Provider')\n     * @param {String} [options.dynReg.logo] - Tool Provider logo. (Ex: 'https://client.example.org/logo.png')\n     * @param {String} [options.dynReg.description] - Tool Provider description. (Ex: 'Tool description')\n     * @param {Array<String>} [options.dynReg.redirectUris] - Additional redirect URIs. (Ex: ['https://tool.example.com/launch'])\n     * @param {Object} [options.dynReg.customParameters] - Custom parameters object. (Ex: { key: 'value' })\n     * @param {Boolean} [options.dynReg.autoActivate = false] - Platform auto activation flag. If true, every Platform registered dynamically is immediately activated. Defaults to false.\n     * @param {Boolean} [options.dynReg.useDeepLinking = true] - Deep Linking usage flag. If true, sets up deep linking in the platform. Defaults to true.\n     */\n  setup (encryptionkey, database, options) {\n    if (this.#setup) throw new Error('PROVIDER_ALREADY_SETUP')\n    if (options && options.https && (!options.ssl || !options.ssl.key || !options.ssl.cert)) throw new Error('MISSING_SSL_KEY_CERTIFICATE')\n    if (!encryptionkey) throw new Error('MISSING_ENCRYPTION_KEY')\n    if (!database) throw new Error('MISSING_DATABASE_CONFIGURATION')\n    if (options && options.dynReg && (!options.dynReg.url || !options.dynReg.name)) throw new Error('MISSING_DYNREG_CONFIGURATION')\n\n    /**\n     * @description Database object.\n     */\n    this.Database = null\n    if (!database.plugin) this.Database = new DB(database)\n    else this.Database = database.plugin\n\n    if (options && (options.appRoute || options.appUrl)) this.#appRoute = options.appRoute || options.appUrl\n    if (options && (options.loginRoute || options.loginUrl)) this.#loginRoute = options.loginRoute || options.loginUrl\n    if (options && (options.keysetRoute || options.keysetUrl)) this.#keysetRoute = options.keysetRoute || options.keysetUrl\n    if (options && options.dynRegRoute) this.#dynRegRoute = options.dynRegRoute\n\n    if (options && options.devMode === true) this.#devMode = true\n    if (options && options.ltiaas === true) this.#ltiaas = true\n    if (options && options.tokenMaxAge !== undefined) this.#tokenMaxAge = options.tokenMaxAge\n\n    // Cookie options\n    if (options && options.cookies) {\n      if (options.cookies.secure === true) this.#cookieOptions.secure = true\n      if (options.cookies.sameSite) this.#cookieOptions.sameSite = options.cookies.sameSite\n      if (options.cookies.domain) this.#cookieOptions.domain = options.cookies.domain\n    }\n\n    this.#ENCRYPTIONKEY = encryptionkey\n\n    this.#server = new Server(options ? options.https : false, options ? options.ssl : false, this.#ENCRYPTIONKEY, options ? options.cors : true, options ? options.serverAddon : false)\n\n    /**\n     * @description Express server object.\n     */\n    this.app = this.#server.app\n\n    /**\n     * @description Grading service.\n     */\n    this.Grade = new GradeService(this.getPlatform, this.#ENCRYPTIONKEY, this.Database)\n\n    /**\n     * @description Deep Linking service.\n     */\n    this.DeepLinking = new DeepLinkingService(this.getPlatform, this.#ENCRYPTIONKEY, this.Database)\n\n    /**\n     * @description Names and Roles service.\n     */\n    this.NamesAndRoles = new NamesAndRolesService(this.getPlatform, this.#ENCRYPTIONKEY, this.Database)\n\n    if (options && options.dynReg) {\n      const routes = {\n        appRoute: this.#appRoute,\n        loginRoute: this.#loginRoute,\n        keysetRoute: this.#keysetRoute\n      }\n      /**\n       * @description Dynamic Registration service.\n       */\n      this.DynamicRegistration = new DynamicRegistration(options.dynReg, routes, this.registerPlatform, this.getPlatform, this.#ENCRYPTIONKEY, this.Database)\n    }\n\n    if (options && options.staticPath) this.#server.setStaticPath(options.staticPath)\n\n    // Registers main athentication and routing middleware\n    const sessionValidator = async (req, res, next) => {\n      provMainDebug('Receiving request at path: ' + req.baseUrl + req.path)\n      // Ckeck if request is attempting to initiate oidc login flow or access reserved routes\n      if (req.path === this.#loginRoute || req.path === this.#keysetRoute || req.path === this.#dynRegRoute) return next()\n\n      provMainDebug('Path does not match reserved endpoints')\n\n      try {\n        // Retrieving ltik token\n        const ltik = req.token\n        // Retrieving cookies\n        const cookies = req.signedCookies\n        provMainDebug('Cookies received: ')\n        provMainDebug(cookies)\n\n        if (!ltik) {\n          const idtoken = req.body.id_token\n          if (idtoken) {\n            // No ltik found but request contains an idtoken\n            provMainDebug('Received idtoken for validation')\n\n            // Retrieves state\n            const state = req.body.state\n\n            // Retrieving validation parameters from cookies\n            provAuthDebug('Response state: ' + state)\n            const validationCookie = cookies['state' + state]\n\n            const validationParameters = {\n              iss: validationCookie,\n              maxAge: this.#tokenMaxAge\n            }\n\n            const valid = await Auth.validateToken(idtoken, this.#devMode, validationParameters, this.getPlatform, this.#ENCRYPTIONKEY, this.Database)\n\n            // Retrieve State object from Database\n            const savedState = await this.Database.Get(false, 'state', { state })\n\n            // Deletes state validation cookie and Database entry\n            res.clearCookie('state' + state, this.#cookieOptions)\n            if (savedState) this.Database.Delete('state', { state })\n\n            provAuthDebug('Successfully validated token!')\n\n            const courseId = valid['https://purl.imsglobal.org/spec/lti/claim/context'] ? valid['https://purl.imsglobal.org/spec/lti/claim/context'].id : 'NF'\n            const resourceId = valid['https://purl.imsglobal.org/spec/lti/claim/resource_link'] ? valid['https://purl.imsglobal.org/spec/lti/claim/resource_link'].id : 'NF'\n\n            const clientId = valid.clientId\n            const deploymentId = valid['https://purl.imsglobal.org/spec/lti/claim/deployment_id']\n\n            const additionalContextProperties = {\n              path: req.path,\n              roles: valid['https://purl.imsglobal.org/spec/lti/claim/roles'],\n              targetLinkUri: valid['https://purl.imsglobal.org/spec/lti/claim/target_link_uri'],\n              custom: valid['https://purl.imsglobal.org/spec/lti/claim/custom'],\n              launchPresentation: valid['https://purl.imsglobal.org/spec/lti/claim/launch_presentation'],\n              endpoint: valid['https://purl.imsglobal.org/spec/lti-ags/claim/endpoint'],\n              namesRoles: valid['https://purl.imsglobal.org/spec/lti-nrps/claim/namesroleservice']\n            }\n\n            const hashOfAdditionalContextProperties = crypto.createHash('sha256').update(JSON.stringify(additionalContextProperties)).digest('hex')\n\n            // Appending hashOfContextProperties is a temporary fix to prevent overwriting existing database entries in some scenarios. See: https://github.com/Cvmcosta/ltijs/issues/181\n            const contextId = encodeURIComponent(valid.iss + clientId + deploymentId + courseId + '_' + resourceId + '_' + hashOfAdditionalContextProperties)\n\n            const platformCode = encodeURIComponent('lti' + Buffer.from(valid.iss + clientId + deploymentId).toString('base64'))\n\n            // Mount platform token\n            const platformToken = {\n              iss: valid.iss,\n              user: valid.sub,\n              userInfo: {\n                given_name: valid.given_name,\n                family_name: valid.family_name,\n                name: valid.name,\n                email: valid.email\n              },\n              platformInfo: valid['https://purl.imsglobal.org/spec/lti/claim/tool_platform'],\n              clientId: valid.clientId,\n              platformId: valid.platformId,\n              deploymentId: valid['https://purl.imsglobal.org/spec/lti/claim/deployment_id']\n            }\n\n            // Store idToken in database\n            await this.Database.Replace(false, 'idtoken', { iss: valid.iss, clientId, deploymentId, user: valid.sub }, platformToken)\n\n            // Mount context token\n            const contextToken = {\n              contextId,\n              user: valid.sub,\n              context: valid['https://purl.imsglobal.org/spec/lti/claim/context'],\n              resource: valid['https://purl.imsglobal.org/spec/lti/claim/resource_link'],\n              messageType: valid['https://purl.imsglobal.org/spec/lti/claim/message_type'],\n              version: valid['https://purl.imsglobal.org/spec/lti/claim/version'],\n              deepLinkingSettings: valid['https://purl.imsglobal.org/spec/lti-dl/claim/deep_linking_settings'],\n              lis: valid['https://purl.imsglobal.org/spec/lti/claim/lis'],\n              ...additionalContextProperties\n            }\n\n            // Store contextToken in database\n            await this.Database.Replace(false, 'contexttoken', { contextId, user: valid.sub }, contextToken)\n\n            // Creates platform session cookie\n            if (!this.#ltiaas) res.cookie(platformCode, valid.sub, this.#cookieOptions)\n\n            provMainDebug('Generating ltik')\n            const newLtikObj = {\n              platformUrl: valid.iss,\n              clientId,\n              deploymentId,\n              platformCode,\n              contextId,\n              user: valid.sub,\n              s: state // Added state to make unique ltiks\n            }\n            // Signing context token\n            const newLtik = jwt.sign(newLtikObj, this.#ENCRYPTIONKEY)\n\n            if (this.#ltiaas) {\n              // Appending query parameters\n              res.locals.query = {}\n              if (savedState) {\n                for (const [key, value] of Object.entries(savedState[0].query)) {\n                  req.query[key] = value\n                  res.locals.query[key] = value\n                }\n              }\n\n              // Creating local variables\n              res.locals.context = JSON.parse(JSON.stringify(contextToken))\n              res.locals.token = JSON.parse(JSON.stringify(platformToken))\n              res.locals.token.platformContext = res.locals.context\n              res.locals.ltik = newLtik\n              provMainDebug('Forwarding request to next handler')\n              return next()\n            }\n\n            // Appending query parameters\n            const query = new URLSearchParams(req.query)\n            if (savedState) {\n              for (const [key, value] of Object.entries(savedState[0].query)) {\n                query.append(key, value)\n              }\n            }\n            query.append('ltik', newLtik)\n            const urlSearchParams = query.toString()\n            provMainDebug('Redirecting to endpoint with ltik')\n            return res.redirect(req.baseUrl + req.path + '?' + urlSearchParams)\n          } else {\n            const state = req.body.state\n            if (state) {\n              provMainDebug('Deleting state cookie and Database entry')\n              const savedState = await this.Database.Get(false, 'state', { state })\n              res.clearCookie('state' + state, this.#cookieOptions)\n              if (savedState) this.Database.Delete('state', { state })\n            }\n\n            if (this.#whitelistedRoutes.find(r => {\n              if ((r.route instanceof RegExp && r.route.test(req.path)) || r.route === req.path) return r.method === 'ALL' || r.method === req.method.toUpperCase()\n              return false\n            })) {\n              provMainDebug('Accessing as whitelisted route')\n              return next()\n            }\n            provMainDebug('No ltik found')\n            provMainDebug('Request body: ', req.body)\n            provMainDebug('Passing request to invalid token handler')\n            res.locals.err = {\n              status: 401,\n              error: 'Unauthorized',\n              details: {\n                description: 'No Ltik or ID Token found.',\n                message: 'NO_LTIK_OR_IDTOKEN_FOUND',\n                bodyReceived: req.body\n              }\n            }\n            return this.#invalidTokenCallback(req, res, next)\n          }\n        }\n\n        provMainDebug('Ltik found')\n        let validLtik\n        try {\n          validLtik = jwt.verify(ltik, this.#ENCRYPTIONKEY)\n        } catch (err) {\n          if (this.#whitelistedRoutes.find(r => {\n            if ((r.route instanceof RegExp && r.route.test(req.path)) || r.route === req.path) return r.method === 'ALL' || r.method === req.method.toUpperCase()\n            return false\n          })) {\n            provMainDebug('Accessing as whitelisted route')\n            return next()\n          }\n          throw (err)\n        }\n        provMainDebug('Ltik successfully verified')\n\n        const platformUrl = validLtik.platformUrl\n        const platformCode = validLtik.platformCode\n        const clientId = validLtik.clientId\n        const deploymentId = validLtik.deploymentId\n        const contextId = validLtik.contextId\n        let user = validLtik.user\n\n        if (!this.#ltiaas) {\n          provMainDebug('Attempting to retrieve matching session cookie')\n          const cookieUser = cookies[platformCode]\n          if (!cookieUser) {\n            if (!this.#devMode) user = false\n            else { provMainDebug('Dev Mode enabled: Missing session cookies will be ignored') }\n          } else if (user.toString() !== cookieUser.toString()) user = false\n        }\n\n        if (user) {\n          provAuthDebug('Valid session found')\n          // Gets corresponding id token from database\n          let idTokenRes = await this.Database.Get(false, 'idtoken', { iss: platformUrl, clientId, deploymentId, user })\n          if (!idTokenRes) throw new Error('IDTOKEN_NOT_FOUND_DB')\n          idTokenRes = idTokenRes[0]\n          const idToken = JSON.parse(JSON.stringify(idTokenRes))\n\n          // Gets correspondent context token from database\n          let contextToken = await this.Database.Get(false, 'contexttoken', { contextId, user })\n          if (!contextToken) throw new Error('CONTEXTTOKEN_NOT_FOUND_DB')\n          contextToken = contextToken[0]\n          idToken.platformContext = JSON.parse(JSON.stringify(contextToken))\n\n          // Creating local variables\n          res.locals.context = idToken.platformContext\n          res.locals.token = idToken\n          res.locals.ltik = ltik\n\n          provMainDebug('Passing request to next handler')\n          return next()\n        } else {\n          provMainDebug('No session cookie found')\n          provMainDebug('Request body: ', req.body)\n          provMainDebug('Passing request to session timeout handler')\n          res.locals.err = {\n            status: 401,\n            error: 'Unauthorized',\n            details: {\n              message: 'Session not found.'\n            }\n          }\n          return this.#sessionTimeoutCallback(req, res, next)\n        }\n      } catch (err) {\n        const state = req.body.state\n        if (state) {\n          provMainDebug('Deleting state cookie and Database entry')\n          const savedState = await this.Database.Get(false, 'state', { state })\n          res.clearCookie('state' + state, this.#cookieOptions)\n          if (savedState) this.Database.Delete('state', { state })\n        }\n\n        provAuthDebug(err)\n        provMainDebug('Passing request to invalid token handler')\n\n        res.locals.err = {\n          status: 401,\n          error: 'Unauthorized',\n          details: {\n            description: 'Error validating ltik or IdToken',\n            message: err.message\n          }\n        }\n        return this.#invalidTokenCallback(req, res, next)\n      }\n    }\n\n    this.app.use(sessionValidator)\n\n    this.app.all(this.#loginRoute, async (req, res) => {\n      const params = { ...req.query, ...req.body }\n      try {\n        if (!params.iss || !params.login_hint || !params.target_link_uri) return res.status(400).send({ status: 400, error: 'Bad Request', details: { message: 'MISSING_LOGIN_PARAMETERS' } })\n        const iss = params.iss\n        const clientId = params.client_id\n        provMainDebug('Receiving a login request from: ' + iss + ', clientId: ' + clientId)\n        let platform\n        if (clientId) platform = await this.getPlatform(iss, clientId)\n        else platform = (await this.getPlatform(iss))[0]\n\n        if (platform) {\n          const platformActive = await platform.platformActive()\n          if (!platformActive) return this.#inactivePlatformCallback(req, res)\n\n          provMainDebug('Redirecting to platform authentication endpoint')\n          // Create state parameter used to validade authentication response\n          let state = encodeURIComponent(crypto.randomBytes(25).toString('hex'))\n\n          provMainDebug('Target Link URI: ', params.target_link_uri)\n          /* istanbul ignore next */\n          // Cleaning up target link uri and retrieving query parameters\n          if (params.target_link_uri.includes('?')) {\n            // Retrieve raw queries\n            const rawQueries = new URLSearchParams('?' + params.target_link_uri.split('?')[1])\n            // Check if state is unique\n            while (await this.Database.Get(false, 'state', { state })) state = encodeURIComponent(crypto.randomBytes(25).toString('hex'))\n            provMainDebug('Generated state: ', state)\n            // Assemble queries object\n            const queries = {}\n            for (const [key, value] of rawQueries) { queries[key] = value }\n            params.target_link_uri = params.target_link_uri.split('?')[0]\n            provMainDebug('Query parameters found: ', queries)\n            provMainDebug('Final Redirect URI: ', params.target_link_uri)\n            // Store state and query parameters on database\n            await this.Database.Insert(false, 'state', { state, query: queries })\n          }\n\n          // Setting up validation info\n          const cookieOptions = JSON.parse(JSON.stringify(this.#cookieOptions))\n          cookieOptions.maxAge = 60 * 1000 // Adding max age to state cookie = 1min\n          res.cookie('state' + state, iss, cookieOptions)\n\n          // Redirect to authentication endpoint\n          const query = await Request.ltiAdvantageLogin(params, platform, state)\n          provMainDebug('Login request: ')\n          provMainDebug(query)\n          res.redirect(url.format({\n            pathname: await platform.platformAuthEndpoint(),\n            query\n          }))\n        } else {\n          provMainDebug('Unregistered platform attempting connection: ' + iss + ', clientId: ' + clientId)\n          return this.#unregisteredPlatformCallback(req, res)\n        }\n      } catch (err) {\n        provMainDebug(err)\n        return res.status(500).send({ status: 500, error: 'Internal Server Error', details: { message: err.message } })\n      }\n    })\n\n    this.app.get(this.#keysetRoute, async (req, res, next) => {\n      return this.#keyset(req, res, next)\n    })\n\n    this.app.all(this.#dynRegRoute, async (req, res, next) => {\n      if (this.DynamicRegistration) return this.#dynamicRegistrationCallback(req, res, next)\n      return res.status(403).send({ status: 403, error: 'Forbidden', details: { message: 'Dynamic registration is disabled.' } })\n    })\n\n    // Main app\n    this.app.all(this.#appRoute, async (req, res, next) => {\n      if (res.locals.context && res.locals.context.messageType === 'LtiDeepLinkingRequest') return this.#deepLinkingCallback(res.locals.token, req, res, next)\n      return this.#connectCallback(res.locals.token, req, res, next)\n    })\n\n    this.#setup = true\n    return this\n  }\n\n  /**\n     * @description Starts listening to a given port for LTI requests and opens connection to the database.\n     * @param {Object} [options] - Deployment options.\n     * @param {Number} [options.port] - Deployment port. 3000 by default.\n     * @param {Boolean} [options.silent] - If true, disables initial startup message.\n     * @param {Boolean} [options.serverless] - If true, Ltijs does not start an Express server instance. This allows usage as a middleware and with services like AWS. Ignores 'port' parameter.\n     * @returns {Promise<true>}\n     */\n  async deploy (options) {\n    if (!this.#setup) throw new Error('PROVIDER_NOT_SETUP')\n    provMainDebug('Attempting to connect to database')\n    try {\n      await this.Database.setup()\n\n      const conf = {\n        port: 3000,\n        silent: false\n      }\n\n      if (options && options.port) conf.port = options.port\n      if (options && options.silent) conf.silent = options.silent\n      // Starts server on given port\n\n      if (options && options.serverless) {\n        if (!conf.silent) {\n          console.log('Ltijs started in serverless mode...')\n        }\n      } else {\n        await this.#server.listen(conf.port)\n        provMainDebug('Ltijs started listening on port: ', conf.port)\n\n        // Startup message\n        const message = 'LTI Provider is listening on port ' + conf.port + '!\\n\\n LTI provider config: \\n >App Route: ' + this.#appRoute + '\\n >Initiate Login Route: ' + this.#loginRoute + '\\n >Keyset Route: ' + this.#keysetRoute + '\\n >Dynamic Registration Route: ' + this.#dynRegRoute\n\n        if (!conf.silent) {\n          console.log('  _   _______ _____      _  _____\\n' +\n                      ' | | |__   __|_   _|    | |/ ____|\\n' +\n                      ' | |    | |    | |      | | (___  \\n' +\n                      ' | |    | |    | |  _   | |\\\\___ \\\\ \\n' +\n                      ' | |____| |   _| |_| |__| |____) |\\n' +\n                      ' |______|_|  |_____|\\\\____/|_____/ \\n\\n', message)\n        }\n      }\n      if (this.#devMode && !conf.silent) console.log('\\nStarting in Dev Mode, state validation and session cookies will not be required. THIS SHOULD NOT BE USED IN A PRODUCTION ENVIRONMENT!')\n\n      // Sets up gracefull shutdown\n      process.on('SIGINT', async () => {\n        await this.close(options)\n        process.exit()\n      })\n\n      return true\n    } catch (err) {\n      console.log('Error during deployment: ', err)\n      await this.close(options)\n      process.exit()\n    }\n  }\n\n  /**\n   * @description Closes connection to database and stops server.\n   * @param {Object} [options] - Deployment options.\n   * @param {Boolean} [options.silent] - If true, disables messages.\n   * @returns {Promise<true>}\n   */\n  async close (options) {\n    if (!options || options.silent !== true) console.log('\\nClosing server...')\n    await this.#server.close()\n    if (!options || options.silent !== true) console.log('Closing connection to the database...')\n    await this.Database.Close()\n    if (!options || options.silent !== true) console.log('Shutdown complete.')\n    return true\n  }\n\n  /**\n     * @description Sets the callback function called whenever there's a sucessfull lti 1.3 launch, exposing a \"token\" object containing the idtoken information.\n     * @param {Function} _connectCallback - Callback function called everytime a platform sucessfully launches to the provider.\n     * @example .onConnect((token, request, response)=>{response.send('OK')})\n     * @returns {true}\n     */\n  onConnect (_connectCallback, options) {\n    /* istanbul ignore next */\n    if (options) {\n      if (options.sameSite || options.secure) console.log('Deprecation Warning: The optional parameters of the onConnect() method are now deprecated and will be removed in the 6.0 release. Cookie parameters can be found in the main Ltijs constructor options: ... { cookies: { secure: true, sameSite: \\'None\\' }.')\n\n      if (options.sessionTimeout || options.invalidToken) console.log('Deprecation Warning: The optional parameters of the onConnect() method are now deprecated and will be removed in the 6.0 release. Invalid token and Session Timeout methods can now be set with the onSessionTimeout() and onInvalidToken() methods.')\n\n      if (options.sameSite) {\n        this.#cookieOptions.sameSite = options.sameSite\n        if (options.sameSite.toLowerCase() === 'none') this.#cookieOptions.secure = true\n      }\n      if (options.secure === true) this.#cookieOptions.secure = true\n      if (options.sessionTimeout) this.#sessionTimeoutCallback = options.sessionTimeout\n      if (options.invalidToken) this.#invalidTokenCallback = options.invalidToken\n    }\n\n    if (_connectCallback) {\n      this.#connectCallback = _connectCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called whenever there's a sucessfull deep linking launch, exposing a \"token\" object containing the idtoken information.\n   * @param {Function} _deepLinkingCallback - Callback function called everytime a platform sucessfully launches a deep linking request.\n   * @example .onDeepLinking((token, request, response)=>{response.send('OK')})\n   * @returns {true}\n   */\n  onDeepLinking (_deepLinkingCallback) {\n    if (_deepLinkingCallback) {\n      this.#deepLinkingCallback = _deepLinkingCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called whenever there's a sucessfull dynamic registration request, allowing the registration flow to be customized.\n   * @param {Function} _dynamicRegistrationCallback - Callback function called everytime the LTI Provider receives a dynamic registration request.\n   */\n  onDynamicRegistration (_dynamicRegistrationCallback) {\n    if (_dynamicRegistrationCallback) {\n      this.#dynamicRegistrationCallback = _dynamicRegistrationCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called when no valid session is found during a request validation.\n   * @param {Function} _sessionTimeoutCallback - Callback method.\n   * @example .onSessionTimeout((request, response)=>{response.send('Session timeout')})\n   * @returns {true}\n   */\n  onSessionTimeout (_sessionTimeoutCallback) {\n    if (_sessionTimeoutCallback) {\n      this.#sessionTimeoutCallback = _sessionTimeoutCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called when the token received fails to be validated.\n   * @param {Function} _invalidTokenCallback - Callback method.\n   * @example .onInvalidToken((request, response)=>{response.send('Invalid token')})\n   * @returns {true}\n   */\n  onInvalidToken (_invalidTokenCallback) {\n    if (_invalidTokenCallback) {\n      this.#invalidTokenCallback = _invalidTokenCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called when the Platform attempting to login is not registered.\n   * @param {Function} _unregisteredPlatformCallback - Callback method.\n   * @example .onUnregisteredPlatform((request, response)=>{response.send('Unregistered Platform')})\n   * @returns {true}\n   */\n  onUnregisteredPlatform (_unregisteredPlatformCallback) {\n    if (_unregisteredPlatformCallback) {\n      this.#unregisteredPlatformCallback = _unregisteredPlatformCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Sets the callback function called when the Platform attempting to login is not activated.\n   * @param {Function} _inactivePlatformCallback - Callback method.\n   * @example .onInactivePlatform((request, response)=>{response.send('Platform not activated')})\n   * @returns {true}\n   */\n  onInactivePlatform (_inactivePlatformCallback) {\n    if (_inactivePlatformCallback) {\n      this.#inactivePlatformCallback = _inactivePlatformCallback\n      return true\n    }\n    throw new Error('MISSING_CALLBACK')\n  }\n\n  /**\n   * @description Gets the main application route that will receive the final decoded Idtoken at the end of a successful launch.\n   * @returns {String}\n   */\n  appRoute () {\n    return this.#appRoute\n  }\n\n  /**\n   * @description Gets the login route responsible for dealing with the OIDC login flow.\n   * @returns {String}\n   */\n  loginRoute () {\n    return this.#loginRoute\n  }\n\n  /**\n     * @description Gets the keyset route that will be used to retrieve a public jwk keyset.\n     * @returns {String}\n     */\n  keysetRoute () {\n    return this.#keysetRoute\n  }\n\n  /**\n   * @description Gets the dynamic registration route that will be used to register platforms dynamically.\n   * @returns {String}\n   */\n  dynRegRoute () {\n    return this.#dynRegRoute\n  }\n\n  /**\n   * @description Whitelists routes to bypass the Ltijs authentication protocol. If validation fails, these routes are still accessed but aren't given an idToken.\n   * @param {String} routes - Routes to be whitelisted\n   */\n  whitelist (...routes) {\n    if (!routes) return this.#whitelistedRoutes\n    const formattedRoutes = []\n    for (const route of routes) {\n      const isObject = (!(route instanceof RegExp) && route === Object(route))\n      if (isObject) {\n        if (!route.route || !route.method) throw new Error('WRONG_FORMAT. Details: Expects string (\"/route\") or object ({ route: \"/route\", method: \"POST\" })')\n        formattedRoutes.push({ route: route.route, method: route.method.toUpperCase() })\n      } else formattedRoutes.push({ route, method: 'ALL' })\n    }\n    this.#whitelistedRoutes = [\n      ...this.#whitelistedRoutes,\n      ...formattedRoutes\n    ]\n\n    return this.#whitelistedRoutes\n  }\n\n  /**\n     * @description Registers a platform.\n     * @param {Object} platform\n     * @param {String} platform.url - Platform url.\n     * @param {String} platform.name - Platform nickname.\n     * @param {String} platform.clientId - Client Id generated by the platform.\n     * @param {String} platform.authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.\n     * @param {String} platform.accesstokenEndpoint - Access token endpoint that the tool will use to get an access token for the platform.\n     * @param {object} platform.authConfig - Authentication method and key for verifying messages from the platform. {method: \"RSA_KEY\", key:\"PUBLIC KEY...\"}\n     * @param {String} platform.authConfig.method - Method of authorization \"RSA_KEY\" or \"JWK_KEY\" or \"JWK_SET\".\n     * @param {String} platform.authConfig.key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.\n     * @param {string} [platform.authorizationServer] - Authorization server identifier to be used as the aud when requesting an access token. If not specified, the access token endpoint URL will be used.\n     * @returns {Promise<Platform>}\n     */\n  async registerPlatform (platform, getPlatform, ENCRYPTIONKEY, Database) {\n    if (!platform || !platform.url || !platform.clientId) throw new Error('MISSING_PLATFORM_URL_OR_CLIENTID')\n\n    const _Database = Database || this.Database\n    const _ENCRYPTIONKEY = ENCRYPTIONKEY || this.#ENCRYPTIONKEY\n    const _getPlatform = getPlatform || this.getPlatform\n\n    let kid\n    const _platform = await _getPlatform(platform.url, platform.clientId, _ENCRYPTIONKEY, _Database)\n\n    if (!_platform) {\n      if (!platform.name || !platform.authenticationEndpoint || !platform.accesstokenEndpoint || !platform.authConfig) throw new Error('MISSING_PARAMS')\n      if (platform.authConfig.method !== 'RSA_KEY' && platform.authConfig.method !== 'JWK_KEY' && platform.authConfig.method !== 'JWK_SET') throw new Error('INVALID_AUTHCONFIG_METHOD. Details: Valid methods are \"RSA_KEY\", \"JWK_KEY\", \"JWK_SET\".')\n      if (!platform.authConfig.key) throw new Error('MISSING_AUTHCONFIG_KEY')\n\n      try {\n        kid = await Auth.generatePlatformKeyPair(_ENCRYPTIONKEY, _Database, platform.url, platform.clientId)\n        const plat = new Platform(platform.name, platform.url, platform.clientId, platform.authenticationEndpoint, platform.accesstokenEndpoint, platform.authorizationServer, kid, _ENCRYPTIONKEY, platform.authConfig, this.Database)\n\n        // Save platform to db\n        provMainDebug('Registering new platform')\n        provMainDebug('Platform Url: ' + platform.url)\n        provMainDebug('Platform ClientId: ' + platform.clientId)\n        await _Database.Replace(false, 'platform', { platformUrl: platform.url, clientId: platform.clientId }, { platformName: platform.name, platformUrl: platform.url, clientId: platform.clientId, authEndpoint: platform.authenticationEndpoint, accesstokenEndpoint: platform.accesstokenEndpoint, authorizationServer: platform.authorizationServer, kid, authConfig: platform.authConfig })\n\n        return plat\n      } catch (err) {\n        await _Database.Delete('publickey', { kid })\n        await _Database.Delete('privatekey', { kid })\n        await _Database.Delete('platform', { platformUrl: platform.url, clientId: platform.clientId })\n        provMainDebug(err.message)\n        throw (err)\n      }\n    } else {\n      provMainDebug('Platform already registered')\n      await _Database.Modify(false, 'platform', { platformUrl: platform.url, clientId: platform.clientId }, { platformName: platform.name || await _platform.platformName(), authEndpoint: platform.authenticationEndpoint || await _platform.platformAuthEndpoint(), accesstokenEndpoint: platform.accesstokenEndpoint || await _platform.platformAccessTokenEndpoint(), authorizationServer: platform.authorizationServer || await _platform.platformAuthorizationServer(), authConfig: platform.authConfig || await _platform.platformAuthConfig() })\n      return _getPlatform(platform.url, platform.clientId, _ENCRYPTIONKEY, _Database)\n    }\n  }\n\n  /**\n     * @description Gets a platform.\n     * @param {String} url - Platform url.\n     * @param {String} [clientId] - Tool clientId.\n     * @returns {Promise<Array<Platform>, Platform | false>}\n     */\n  async getPlatform (url, clientId, ENCRYPTIONKEY, Database) {\n    if (!url) throw new Error('MISSING_PLATFORM_URL')\n\n    const _Database = Database || this.Database\n    const _ENCRYPTIONKEY = ENCRYPTIONKEY || this.#ENCRYPTIONKEY\n\n    if (clientId) {\n      const result = await _Database.Get(false, 'platform', { platformUrl: url, clientId })\n      if (!result) return false\n      const plat = result[0]\n      const platform = new Platform(plat.platformName, plat.platformUrl, plat.clientId, plat.authEndpoint, plat.accesstokenEndpoint, plat.authorizationServer, plat.kid, _ENCRYPTIONKEY, plat.authConfig, _Database)\n      return platform\n    }\n\n    const result = await _Database.Get(false, 'platform', { platformUrl: url })\n    if (!result) return false\n\n    const platforms = []\n    for (const plat of result) {\n      const platform = new Platform(plat.platformName, plat.platformUrl, plat.clientId, plat.authEndpoint, plat.accesstokenEndpoint, plat.authorizationServer, plat.kid, _ENCRYPTIONKEY, plat.authConfig, _Database)\n      platforms.push(platform)\n    }\n\n    return platforms\n  }\n\n  /**\n   * @description Gets a platform by the platformId.\n   * @param {String} platformId - Platform Id.\n   * @returns {Promise<Array<Platform>, Platform | false>}\n   */\n  async getPlatformById (platformId) {\n    if (!platformId) throw new Error('MISSING_PLATFORM_ID')\n\n    const result = await this.Database.Get(false, 'platform', { kid: platformId })\n    if (!result) return false\n    const plat = result[0]\n    const platform = new Platform(plat.platformName, plat.platformUrl, plat.clientId, plat.authEndpoint, plat.accesstokenEndpoint, plat.authorizationServer, plat.kid, this.#ENCRYPTIONKEY, plat.authConfig, this.Database)\n    return platform\n  }\n\n  /**\n   * @description Updates a platform by the platformId.\n   * @param {String} platformId - Platform Id.\n   * @param {Object} platformInfo - Update Information.\n   * @param {String} platformInfo.url - Platform url.\n   * @param {String} platformInfo.clientId - Platform clientId.\n   * @param {String} platformInfo.name - Platform nickname.\n   * @param {String} platformInfo.authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.\n   * @param {String} platformInfo.accesstokenEndpoint - Access token endpoint that the tool will use to get an access token for the platform.\n   * @param {object} platformInfo.authConfig - Authentication method and key for verifying messages from the platform. {method: \"RSA_KEY\", key:\"PUBLIC KEY...\"}\n   * @param {String} platformInfo.authConfig.method - Method of authorization \"RSA_KEY\" or \"JWK_KEY\" or \"JWK_SET\".\n   * @param {String} platformInfo.authConfig.key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.\n   * @returns {Promise<Array<Platform>, Platform | false>}\n   */\n  async updatePlatformById (platformId, platformInfo) {\n    if (!platformId) { throw new Error('MISSING_PLATFORM_ID') }\n    if (!platformInfo) { throw new Error('MISSING_PLATFORM_INFO') }\n\n    const platform = await this.getPlatformById(platformId)\n    if (!platform) return false\n\n    const oldURL = await platform.platformUrl()\n    const oldClientId = await platform.platformClientId()\n\n    const update = {\n      url: platformInfo.url || oldURL,\n      clientId: platformInfo.clientId || oldClientId,\n      name: platformInfo.name || await platform.platformName(),\n      authenticationEndpoint: platformInfo.authenticationEndpoint || await platform.platformAuthEndpoint(),\n      accesstokenEndpoint: platformInfo.accesstokenEndpoint || await platform.platformAccessTokenEndpoint()\n    }\n    if (platformInfo.authorizationServer !== undefined) update.authorizationServer = platformInfo.authorizationServer\n\n    const authConfig = await platform.platformAuthConfig()\n    update.authConfig = authConfig\n    if (platformInfo.authConfig) {\n      if (platformInfo.authConfig.method) update.authConfig.method = platformInfo.authConfig.method\n      if (platformInfo.authConfig.key) update.authConfig.key = platformInfo.authConfig.key\n    }\n\n    let alteredUrlClientIdFlag = false\n    if (platformInfo.url || platformInfo.clientId) {\n      if (platformInfo.url !== oldURL || platformInfo.clientId !== oldClientId) alteredUrlClientIdFlag = true\n    }\n\n    if (alteredUrlClientIdFlag) {\n      if (await this.Database.Get(false, 'platform', { platformUrl: update.url, clientId: update.clientId })) throw new Error('URL_CLIENT_ID_COMBINATION_ALREADY_EXISTS')\n    }\n\n    try {\n      if (alteredUrlClientIdFlag) {\n        await this.Database.Modify(false, 'publickey', { kid: platformId }, { platformUrl: update.url, clientId: update.clientId })\n        await this.Database.Modify(false, 'privatekey', { kid: platformId }, { platformUrl: update.url, clientId: update.clientId })\n      }\n\n      await this.Database.Modify(false, 'platform', { kid: platformId }, { platformUrl: update.url, clientId: update.clientId, platformName: update.name, authEndpoint: update.authenticationEndpoint, accesstokenEndpoint: update.accesstokenEndpoint, authorizationServer: update.authorizationServer, authConfig: update.authConfig })\n\n      const platform = new Platform(update.name, update.url, update.clientId, update.authenticationEndpoint, update.accesstokenEndpoint, update.authorizationServer, platformId, this.#ENCRYPTIONKEY, update.authConfig, this.Database)\n      return platform\n    } catch (err) {\n      if (alteredUrlClientIdFlag) {\n        await this.Database.Modify(false, 'publickey', { kid: platformId }, { platformUrl: oldURL, clientId: oldClientId })\n        await this.Database.Modify(false, 'privatekey', { kid: platformId }, { platformUrl: oldURL, clientId: oldClientId })\n      }\n      provMainDebug(err.message)\n      throw (err)\n    }\n  }\n\n  /**\n     * @description Deletes a platform.\n     * @param {string} url - Platform url.\n     * @param {String} clientId - Tool clientId.\n     * @returns {Promise<true>}\n     */\n  async deletePlatform (url, clientId) {\n    if (!url || !clientId) throw new Error('MISSING_PARAM')\n    const platform = await this.getPlatform(url, clientId)\n    if (platform) await platform.delete()\n    return true\n  }\n\n  /**\n   * @description Deletes a platform by the platform Id.\n   * @param {string} platformId - Platform Id.\n   * @returns {Promise<true>}\n   */\n  async deletePlatformById (platformId) {\n    if (!platformId) throw new Error('MISSING_PLATFORM_ID')\n    const platform = await this.getPlatformById(platformId)\n    if (platform) await platform.delete()\n    return true\n  }\n\n  /**\n     * @description Gets all platforms.\n     * @returns {Promise<Array<Platform>>}\n     */\n  async getAllPlatforms () {\n    const platforms = []\n    const result = await this.Database.Get(false, 'platform')\n\n    if (result) {\n      for (const plat of result) platforms.push(new Platform(plat.platformName, plat.platformUrl, plat.clientId, plat.authEndpoint, plat.accesstokenEndpoint, plat.authorizationServer, plat.kid, this.#ENCRYPTIONKEY, plat.authConfig, this.Database))\n      return platforms\n    }\n    return []\n  }\n\n  /**\n   * @description Redirects to a new location. Passes Ltik if present.\n   * @param {Object} res - Express response object.\n   * @param {String} path - Redirect path.\n   * @param {Object} [options] - Redirection options.\n   * @param {Boolean} [options.newResource = false] - If true, changes the path variable on the context token.\n   * @param {Object} [options.query] - Query parameters that will be added to the URL.\n   * @example lti.redirect(response, '/path', { newResource: true })\n   */\n  async redirect (res, path, options) {\n    if (!res || !path) throw new Error('MISSING_ARGUMENT')\n    if (!res.locals.token) return res.redirect(path) // If no token is present, just redirects\n    provMainDebug('Redirecting to: ', path)\n    const token = res.locals.token\n    const pathParts = url.parse(path)\n    const additionalQueries = (options && options.query) ? options.query : {}\n\n    // Updates path variable if this is a new resource\n    if ((options && (options.newResource || options.isNewResource))) {\n      provMainDebug('Changing context token path to: ' + path)\n      await this.Database.Modify(false, 'contexttoken', { contextId: token.platformContext.contextId, user: res.locals.token.user }, { path })\n    }\n\n    // Formatting path with queries\n    const params = new URLSearchParams(pathParts.search)\n    const queries = {}\n    for (const [key, value] of params) { queries[key] = value }\n\n    // Fixing fast-url-parser bug where port gets assigned to pathname if there's no path\n    const portMatch = pathParts.pathname.match(/:[0-9]*/)\n    if (portMatch) {\n      pathParts.port = portMatch[0].split(':')[1]\n      pathParts.pathname = pathParts.pathname.split(portMatch[0]).join('')\n    }\n    const formattedPath = url.format({\n      protocol: pathParts.protocol,\n      hostname: pathParts.hostname,\n      pathname: pathParts.pathname,\n      port: pathParts.port,\n      auth: pathParts.auth,\n      hash: pathParts.hash,\n      query: {\n        ...queries,\n        ...additionalQueries,\n        ltik: res.locals.ltik\n      }\n    })\n\n    // Redirects to path with queries\n    return res.redirect(formattedPath)\n  }\n\n  // Deprecated methods, these methods will be removed in version 6.0\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  appUrl () {\n    console.log('Deprecation warning: The appUrl() method is now deprecated and will be removed in the 6.0 release. Use appRoute() instead.')\n    return this.appRoute()\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  loginUrl () {\n    console.log('Deprecation warning: The loginUrl() method is now deprecated and will be removed in the 6.0 release. Use loginRoute() instead.')\n    return this.loginRoute()\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  keysetUrl () {\n    return this.#keysetRoute\n  }\n}\n\nconst provider = new Provider()\n\nexport default provider\nexport { Provider }\n"],"mappings":"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","ignoreList":[]}