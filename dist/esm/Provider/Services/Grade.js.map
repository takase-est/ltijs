{"version":3,"file":"Grade.js","names":["got","parseLink","debug","provGradeServiceDebug","_getPlatform","_classPrivateFieldLooseKey","_ENCRYPTIONKEY","_Database","Grade","constructor","getPlatform","ENCRYPTIONKEY","Database","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","getLineItems","idtoken","options","accessToken","Error","iss","platform","clientId","platformActive","platformAccessToken","result","response","url","get","headers","Authorization","token_type","access_token","Accept","lineitemsEndpoint","platformContext","endpoint","lineitems","query","indexOf","Array","from","URLSearchParams","split","queryParams","resourceLinkId","push","resource","id","limit","label","tag","resourceId","searchParams","lineItems","JSON","parse","body","parsedLinks","link","next","prev","first","last","filter","lineitem","length","slice","createLineItem","lineItem","newLineItem","post","json","getLineItemById","lineItemId","lineitemUrl","updateLineItemById","put","deleteLineItemById","delete","submitScore","score","shouldFetchScoreMaximum","scoreGiven","undefined","scoreMaximum","scopes","join","scoreUrl","userId","user","timestamp","Date","now","toISOString","getScores","resultsUrl","scores","deleteLineItems","success","failure","err","error","message","scorePublish","autoCreate","resultsArray","results","GetLineItems","console","log","CreateLineItem","DeleteLineItems","ScorePublish","Result"],"sources":["../../../../src/esm/Provider/Services/Grade.js"],"sourcesContent":["/* eslint-disable require-atomic-updates */\n/* eslint-disable no-useless-escape */\n\n/* Provider Assignment and Grade Service */\n\nimport got from 'got'\nimport parseLink from 'parse-link-header'\nimport debug from 'debug'\n\nconst provGradeServiceDebug = debug('provider:gradeService')\n\nclass Grade {\n  #getPlatform = null\n\n  #ENCRYPTIONKEY = ''\n\n  #Database\n\n  constructor (getPlatform, ENCRYPTIONKEY, Database) {\n    this.#getPlatform = getPlatform\n    this.#ENCRYPTIONKEY = ENCRYPTIONKEY\n    this.#Database = Database\n  }\n\n  /**\n   * @description Gets lineitems from a given platform\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {Object} [options] - Options object\n   * @param {Boolean} [options.resourceLinkId = false] - Filters line items based on the resourceLinkId of the resource that originated the request\n   * @param {String} [options.resourceId = false] - Filters line items based on the resourceId\n   * @param {String} [options.tag = false] - Filters line items based on the tag\n   * @param {Number} [options.limit = false] - Sets a maximum number of line items to be returned\n   * @param {String} [options.id = false] - Filters line items based on the id\n   * @param {String} [options.label = false] - Filters line items based on the label\n   * @param {String} [options.url = false] - Retrieves line items from a specific URL. Usually retrieved from the `next` link header of a previous request.\n   */\n  async getLineItems (idtoken, options, accessToken) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    if (!accessToken) {\n      const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database) // Remove and use DB instead\n\n      /* istanbul ignore next */\n      if (!platform) {\n        provGradeServiceDebug('Platform not found')\n        throw new Error('PLATFORM_NOT_FOUND')\n      }\n      const platformActive = await platform.platformActive()\n      if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n      provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n\n      accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly')\n      provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n    }\n\n    const result = {}\n    let response\n\n    if (options && options.url) {\n      provGradeServiceDebug('Requesting line items from: ' + options.url)\n      response = await got.get(options.url, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, Accept: 'application/vnd.ims.lis.v2.lineitemcontainer+json' } })\n    } else {\n      let lineitemsEndpoint = idtoken.platformContext.endpoint.lineitems\n      let query = []\n      if (lineitemsEndpoint.indexOf('?') !== -1) {\n        query = Array.from(new URLSearchParams(lineitemsEndpoint.split('\\?')[1]))\n        lineitemsEndpoint = lineitemsEndpoint.split('\\?')[0]\n      }\n\n      let queryParams = [...query]\n      if (options) {\n        if (options.resourceLinkId) queryParams.push(['resource_link_id', idtoken.platformContext.resource.id])\n        if (options.limit && !options.id && !options.label) queryParams.push(['limit', options.limit])\n        if (options.tag) queryParams.push(['tag', options.tag])\n        if (options.resourceId) queryParams.push(['resource_id', options.resourceId])\n      }\n      queryParams = new URLSearchParams(queryParams)\n      provGradeServiceDebug('Requesting line items from: ' + lineitemsEndpoint)\n      response = await got.get(lineitemsEndpoint, { searchParams: queryParams, headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, Accept: 'application/vnd.ims.lis.v2.lineitemcontainer+json' } })\n    }\n\n    const headers = response.headers\n    let lineItems = JSON.parse(response.body)\n\n    // Parsing link headers\n    const parsedLinks = parseLink(headers.link)\n\n    if (parsedLinks) {\n      if (parsedLinks.next) result.next = parsedLinks.next.url\n      if (parsedLinks.prev) result.prev = parsedLinks.prev.url\n      if (parsedLinks.first) result.first = parsedLinks.first.url\n      if (parsedLinks.last) result.last = parsedLinks.last.url\n    }\n\n    // Applying special filters\n    if (options && options.id) lineItems = lineItems.filter(lineitem => { return lineitem.id === options.id })\n    if (options && options.label) lineItems = lineItems.filter(lineitem => { return lineitem.label === options.label })\n    if (options && options.limit && (options.id || options.label) && options.limit < lineItems.length) lineItems = lineItems.slice(0, options.limit)\n\n    result.lineItems = lineItems\n    return result\n  }\n\n  /**\n   * @description Creates a new lineItem for the given context\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {Object} lineItem - LineItem Object, following the application/vnd.ims.lis.v2.lineitem+json specification\n   * @param {Object} [options] - Aditional configuration for the lineItem\n   * @param {Boolean} [options.resourceLinkId = false] - If set to true, binds the created lineItem to the resource that originated the request\n   */\n  async createLineItem (idtoken, lineItem, options, accessToken) {\n    // Validating lineItem\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItem) { provGradeServiceDebug('Line item object missing.'); throw new Error('MISSING_LINE_ITEM') }\n\n    if (options && options.resourceLinkId) lineItem.resourceLinkId = idtoken.platformContext.resource.id\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    if (!accessToken) {\n      const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n      /* istanbul ignore next */\n      if (!platform) {\n        provGradeServiceDebug('Platform not found')\n        throw new Error('PLATFORM_NOT_FOUND')\n      }\n      const platformActive = await platform.platformActive()\n      if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n      provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n\n      accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem')\n      provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n    }\n    const lineitemsEndpoint = idtoken.platformContext.endpoint.lineitems\n\n    provGradeServiceDebug('Creating Line item: ')\n    provGradeServiceDebug(lineItem)\n\n    const newLineItem = await got.post(lineitemsEndpoint, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, 'Content-Type': 'application/vnd.ims.lis.v2.lineitem+json' }, json: lineItem }).json()\n\n    provGradeServiceDebug('Line item successfully created')\n    return newLineItem\n  }\n\n  /**\n   * @description Gets LineItem by the ID\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {String} lineItemId - LineItem ID.\n   */\n  async getLineItemById (idtoken, lineItemId, accessToken) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItemId) { provGradeServiceDebug('Missing lineItemID.'); throw new Error('MISSING_LINEITEM_ID') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    if (!accessToken) {\n      const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database) // Remove and use DB instead\n\n      /* istanbul ignore next */\n      if (!platform) {\n        provGradeServiceDebug('Platform not found')\n        throw new Error('PLATFORM_NOT_FOUND')\n      }\n      const platformActive = await platform.platformActive()\n      if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n      provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n\n      accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly')\n      provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n    }\n\n    const lineitemUrl = lineItemId\n    provGradeServiceDebug('Retrieving: ' + lineitemUrl)\n    let response = await got.get(lineitemUrl, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token } })\n    response = JSON.parse(response.body)\n    provGradeServiceDebug('LineItem sucessfully retrieved')\n    return response\n  }\n\n  /**\n   * @description Updates LineItem by the ID\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {String} lineItemId - LineItem ID.\n   * @param {Object} lineItem - Updated fields.\n   */\n  async updateLineItemById (idtoken, lineItemId, lineItem) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItemId) { provGradeServiceDebug('Missing lineItemID.'); throw new Error('MISSING_LINEITEM_ID') }\n    if (!lineItem) { provGradeServiceDebug('Missing lineItem object.'); throw new Error('MISSING_LINEITEM') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    /* istanbul ignore next */\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    const lineitemUrl = lineItemId\n    provGradeServiceDebug('Updating: ' + lineitemUrl)\n    let response = await got.put(lineitemUrl, { json: lineItem, headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, 'Content-Type': 'application/vnd.ims.lis.v2.lineitem+json' } })\n    response = JSON.parse(response.body)\n    provGradeServiceDebug('LineItem sucessfully updated')\n    return response\n  }\n\n  /**\n   * @description Deletes LineItem by the ID\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {String} lineItemId - LineItem ID.\n   */\n  async deleteLineItemById (idtoken, lineItemId) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItemId) { provGradeServiceDebug('Missing lineItemID.'); throw new Error('MISSING_LINEITEM_ID') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    /* istanbul ignore next */\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    const lineitemUrl = lineItemId\n    provGradeServiceDebug('Deleting: ' + lineitemUrl)\n    await got.delete(lineitemUrl, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token } })\n    provGradeServiceDebug('LineItem sucessfully deleted')\n    return true\n  }\n\n  /**\n   * @description Publishes a score or grade to a lineItem. Represents the Score Publish service described in the lti 1.3 specification.\n   * @param {Object} idtoken - Idtoken for the user.\n   * @param {String} lineItemId - LineItem ID.\n   * @param {Object} score - Score/Grade following the LTI Standard application/vnd.ims.lis.v1.score+json.\n   */\n  async submitScore (idtoken, lineItemId, score) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItemId) { provGradeServiceDebug('Missing lineItemID.'); throw new Error('MISSING_LINEITEM_ID') }\n    if (!score) { provGradeServiceDebug('Score object missing.'); throw new Error('MISSING_SCORE') }\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    /* istanbul ignore next */\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    const shouldFetchScoreMaximum = score.scoreGiven !== undefined && score.scoreMaximum === undefined\n    const scopes = ['https://purl.imsglobal.org/spec/lti-ags/scope/score']\n    if (shouldFetchScoreMaximum) {\n      scopes.push('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem')\n    }\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken(scopes.join(' '))\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    // Creating scores URL\n    const lineitemUrl = lineItemId\n    let scoreUrl = lineitemUrl + '/scores'\n    if (lineitemUrl.indexOf('?') !== -1) {\n      const query = lineitemUrl.split('\\?')[1]\n      const url = lineitemUrl.split('\\?')[0]\n      scoreUrl = url + '/scores?' + query\n    }\n\n    // Creating scoreMaximum if it is not present and scoreGiven exists\n    if (shouldFetchScoreMaximum) {\n      const lineItem = await this.getLineItemById(idtoken, lineItemId, accessToken)\n      score.scoreMaximum = lineItem.scoreMaximum\n    }\n\n    // If no user is specified, sends the score to the user that originated request\n    if (score.userId === undefined) score.userId = idtoken.user\n\n    // Creating timestamp\n    score.timestamp = new Date(Date.now()).toISOString()\n\n    provGradeServiceDebug('Sending score to: ' + scoreUrl)\n    provGradeServiceDebug(score)\n\n    await got.post(scoreUrl, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, 'Content-Type': 'application/vnd.ims.lis.v1.score+json' }, json: score })\n    provGradeServiceDebug('Score successfully sent')\n    return score\n  }\n\n  /**\n   * @description Retrieves scores from a lineItem. Represents the Result service described in the lti 1.3 specification.\n   * @param {Object} idtoken - Idtoken for the user.\n   * @param {String} lineItemId - LineItem ID.\n   * @param {Object} [options] - Options object.\n   * @param {String} [options.userId = false] - Filters based on the userId.\n   * @param {Number} [options.limit = false] - Sets a maximum number of scores to be returned.\n   * @param {String} [options.url = false] - Retrieves scores from a specific URL. Usually retrieved from the `next` link header of a previous request.\n   */\n  async getScores (idtoken, lineItemId, options) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!lineItemId) { provGradeServiceDebug('Missing lineItemID.'); throw new Error('MISSING_LINEITEM_ID') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    /* istanbul ignore next */\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    const result = {}\n    let response\n\n    if (options && options.url) {\n      provGradeServiceDebug('Requesting scores from: ' + options.url)\n      response = await got.get(options.url, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, Accept: 'application/vnd.ims.lis.v2.resultcontainer+json' } })\n    } else {\n      // Creating results URL\n      const lineitemUrl = lineItemId\n      let query = []\n      let resultsUrl = lineitemUrl + '/results'\n      if (lineitemUrl.indexOf('?') !== -1) {\n        query = Array.from(new URLSearchParams(lineitemUrl.split('\\?')[1]))\n        const url = lineitemUrl.split('\\?')[0]\n        resultsUrl = url + '/results'\n      }\n\n      // Creating query parameters\n      const queryParams = []\n      if (options) {\n        if (options.userId) queryParams.push(['user_id', options.userId])\n        if (options.limit) queryParams.push(['limit', options.limit])\n      }\n      let searchParams = [...queryParams, ...query]\n      searchParams = new URLSearchParams(searchParams)\n\n      provGradeServiceDebug('Requesting scores from: ' + resultsUrl)\n      response = await got.get(resultsUrl, { searchParams, headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, Accept: 'application/vnd.ims.lis.v2.resultcontainer+json' } })\n    }\n\n    const headers = response.headers\n    result.scores = JSON.parse(response.body)\n\n    // Parsing link headers\n    const parsedLinks = parseLink(headers.link)\n\n    if (parsedLinks) {\n      if (parsedLinks.next) result.next = parsedLinks.next.url\n      if (parsedLinks.prev) result.prev = parsedLinks.prev.url\n      if (parsedLinks.first) result.first = parsedLinks.first.url\n      if (parsedLinks.last) result.last = parsedLinks.last.url\n    }\n\n    return result\n  }\n\n  // Deprecated methods, these methods will be removed in version 6.0\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   * @description Deletes lineitems from a given platform. Deprecated in favor of deleteLineItemById.\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {Object} [options] - Options object\n   * @param {Boolean} [options.resourceLinkId = false] - Filters line items based on the resourceLinkId of the resource that originated the request\n   * @param {String} [options.resourceId = false] - Filters line items based on the resourceId\n   * @param {String} [options.tag = false] - Filters line items based on the tag\n   * @param {Number} [options.limit = false] - Sets a maximum number of line items to be deleted\n   * @param {String} [options.id = false] - Filters line items based on the id\n   * @param {String} [options.label = false] - Filters line items based on the label\n   */\n  async deleteLineItems (idtoken, options) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    const response = await this.getLineItems(idtoken, options, accessToken)\n    const lineItems = response.lineItems\n\n    const result = { success: [], failure: [] }\n    for (const lineitem of lineItems) {\n      try {\n        const lineitemUrl = lineitem.id\n\n        provGradeServiceDebug('Deleting: ' + lineitemUrl)\n        await got.delete(lineitemUrl, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token } })\n        provGradeServiceDebug('LineItem sucessfully deleted')\n        result.success.push({ lineitem: lineitemUrl })\n      } catch (err) {\n        provGradeServiceDebug(err)\n        result.failure.push({ lineitem: lineitem.id, error: err.message })\n        continue\n      }\n    }\n    return result\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   * @description Publishes a score or grade to a platform. Deprecated in favor of sendScores, that send scores to a specific lineItem.\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {Object} score - Score/Grade following the Lti Standard application/vnd.ims.lis.v1.score+json\n   * @param {Object} [options] - Options object\n   * @param {Object} [options.autoCreate] - Line item that will be created automatically if it does not exist\n   * @param {String} [options.userId = false] - Send score to a specific user. If no userId is provided, the score is sent to the user that initiated the request\n   * @param {Boolean} [options.resourceLinkId = true] - Filters line items based on the resourceLinkId of the resource that originated the request. Defaults to true\n   * @param {String} [options.resourceId = false] - Filters line items based on the resourceId\n   * @param {String} [options.tag = false] - Filters line items based on the tag\n   * @param {Number} [options.limit = false] - Sets a maximum number of line items to be reached\n   * @param {String} [options.id = false] - Filters line items based on the id\n   * @param {String} [options.label = false] - Filters line items based on the label\n   */\n  async scorePublish (idtoken, score, options) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    if (!score) { provGradeServiceDebug('Score object missing.'); throw new Error('MISSING_SCORE') }\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem https://purl.imsglobal.org/spec/lti-ags/scope/score')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    if (options) {\n      if (options.resourceLinkId === false) options.resourceLinkId = false\n      else options.resourceLinkId = true\n    } else options = { resourceLinkId: true }\n\n    let lineItems\n    if (options && options.id) {\n      try {\n        lineItems = [await this.getLineItemById(idtoken, options.id, accessToken)]\n      } catch {\n        lineItems = []\n      }\n    } else {\n      const response = await this.getLineItems(idtoken, options, accessToken)\n      lineItems = response.lineItems\n    }\n\n    const result = { success: [], failure: [] }\n\n    if (lineItems.length === 0) {\n      if (options && options.autoCreate) {\n        provGradeServiceDebug('No line item found, creating new lite item automatically')\n        lineItems.push(await this.createLineItem(idtoken, options.autoCreate, { resourceLinkId: options.resourceLinkId }, accessToken))\n      } else provGradeServiceDebug('No available line item found')\n    }\n\n    for (const lineitem of lineItems) {\n      try {\n        const lineitemUrl = lineitem.id\n        let scoreUrl = lineitemUrl + '/scores'\n\n        if (lineitemUrl.indexOf('?') !== -1) {\n          const query = lineitemUrl.split('\\?')[1]\n          const url = lineitemUrl.split('\\?')[0]\n          scoreUrl = url + '/scores?' + query\n        }\n\n        provGradeServiceDebug('Sending score to: ' + scoreUrl)\n\n        if (options && options.userId) score.userId = options.userId\n        else score.userId = idtoken.user\n\n        score.timestamp = new Date(Date.now()).toISOString()\n        if (score.scoreGiven) score.scoreMaximum = lineitem.scoreMaximum\n        provGradeServiceDebug(score)\n\n        await got.post(scoreUrl, { headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, 'Content-Type': 'application/vnd.ims.lis.v1.score+json' }, json: score })\n        provGradeServiceDebug('Score successfully sent')\n        result.success.push({ lineitem: lineitemUrl })\n      } catch (err) {\n        provGradeServiceDebug(err)\n        result.failure.push({ lineitem: lineitem.id, error: err.message })\n        continue\n      }\n    }\n    return result\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   * @description Retrieves a certain lineitem's results. Deprecated in favor of getScores that retrieves scores from a specific lineItem.\n   * @param {Object} idtoken - Idtoken for the user\n   * @param {Object} [options] - Options object\n   * @param {String} [options.userId = false] - Filters based on the userId\n   * @param {Boolean} [options.resourceLinkId = true] - Filters line items based on the resourceLinkId of the resource that originated the request. Defaults to true\n   * @param {String} [options.resourceId = false] - Filters line items based on the resourceId\n   * @param {String} [options.tag = false] - Filters line items based on the tag\n   * @param {Number} [options.limit = false] - Sets a maximum number of results to be returned per line item\n   * @param {String} [options.id = false] - Filters line items based on the id\n   * @param {String} [options.label = false] - Filters line items based on the label\n   */\n  async result (idtoken, options) {\n    if (!idtoken) { provGradeServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n\n    provGradeServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    if (!platform) {\n      provGradeServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provGradeServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const accessToken = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly')\n    provGradeServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    let limit = false\n\n    if (options) {\n      if (options.resourceLinkId === false) options.resourceLinkId = false\n      else options.resourceLinkId = true\n\n      if (options.limit) {\n        limit = options.limit\n        options.limit = false\n      }\n    } else options = { resourceLinkId: true }\n\n    let lineItems\n    if (options && options.id) {\n      try {\n        lineItems = [await this.getLineItemById(idtoken, options.id, accessToken)]\n      } catch {\n        lineItems = []\n      }\n    } else {\n      const response = await this.getLineItems(idtoken, options, accessToken)\n      lineItems = response.lineItems\n    }\n\n    const queryParams = []\n    if (options) {\n      if (options.userId) queryParams.push(['user_id', options.userId])\n      if (limit) queryParams.push(['limit', limit])\n    }\n\n    const resultsArray = []\n\n    for (const lineitem of lineItems) {\n      try {\n        const lineitemUrl = lineitem.id\n        let query = []\n        let resultsUrl = lineitemUrl + '/results'\n\n        if (lineitemUrl.indexOf('?') !== -1) {\n          query = Array.from(new URLSearchParams(lineitemUrl.split('\\?')[1]))\n          const url = lineitemUrl.split('\\?')[0]\n          resultsUrl = url + '/results'\n        }\n        let searchParams = [...queryParams, ...query]\n        searchParams = new URLSearchParams(searchParams)\n        provGradeServiceDebug('Requesting results from: ' + resultsUrl)\n        const results = await got.get(resultsUrl, { searchParams, headers: { Authorization: accessToken.token_type + ' ' + accessToken.access_token, Accept: 'application/vnd.ims.lis.v2.resultcontainer+json' } }).json()\n\n        resultsArray.push({\n          lineitem: lineitem.id,\n          results\n        })\n      } catch (err) {\n        provGradeServiceDebug(err.message)\n        resultsArray.push({\n          lineitem: lineitem.id,\n          error: err.message\n        })\n        continue\n      }\n    }\n    return resultsArray\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async GetLineItems (idtoken, options, accessToken) {\n    console.log('Deprecation warning: GetLineItems() is now deprecated, use getLineItems() instead. GetLineItems() will be removed in the 6.0 release.')\n    return this.getLineItems(idtoken, options, accessToken)\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async CreateLineItem (idtoken, lineItem, options, accessToken) {\n    console.log('Deprecation warning: CreateLineItem() is now deprecated, use createLineItem() instead. CreateLineItem() will be removed in the 6.0 release.')\n    return this.createLineItem(idtoken, lineItem, options, accessToken)\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async DeleteLineItems (idtoken, options) {\n    console.log('Deprecation warning: DeleteLineItems() is now deprecated, use deleteLineItems() instead. DeleteLineItems() will be removed in the 6.0 release.')\n    return this.deleteLineItems(idtoken, options)\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async ScorePublish (idtoken, score, options) {\n    console.log('Deprecation warning: ScorePublish() is now deprecated, use scorePublish() instead. ScorePublish() will be removed in the 6.0 release.')\n    return this.scorePublish(idtoken, score, options)\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async Result (idtoken, options) {\n    console.log('Deprecation warning: Result() is now deprecated, use result() instead. Result() will be removed in the 6.0 release.')\n    return this.result(idtoken, options)\n  }\n}\n\nexport default Grade\n"],"mappings":"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","ignoreList":[]}