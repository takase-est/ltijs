{"version":3,"file":"NamesAndRoles.js","names":["got","parseLink","debug","provNamesAndRolesServiceDebug","_getPlatform","_classPrivateFieldLooseKey","_ENCRYPTIONKEY","_Database","NamesAndRoles","constructor","getPlatform","ENCRYPTIONKEY","Database","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","getMembers","idtoken","options","Error","iss","platform","clientId","platformActive","tokenRes","platformAccessToken","pages","query","next","platformContext","namesRoles","context_memberships_url","url","role","push","limit","resourceLinkId","resource","id","length","URLSearchParams","differences","result","curPage","response","get","searchParams","headers","Authorization","token_type","access_token","Accept","body","JSON","parse","stringify","members","parsedLinks","link"],"sources":["../../../../src/esm/Provider/Services/NamesAndRoles.js"],"sourcesContent":["/* Names and Roles Provisioning Service */\n\nimport got from 'got'\nimport parseLink from 'parse-link-header'\nimport debug from 'debug'\n\nconst provNamesAndRolesServiceDebug = debug('provider:namesAndRolesService')\n\nclass NamesAndRoles {\n  #getPlatform = null\n\n  #ENCRYPTIONKEY = ''\n\n  #Database\n\n  constructor (getPlatform, ENCRYPTIONKEY, Database) {\n    this.#getPlatform = getPlatform\n    this.#ENCRYPTIONKEY = ENCRYPTIONKEY\n    this.#Database = Database\n  }\n\n  /**\n   * @description Retrieves members from platform.\n   * @param {Object} idtoken - Idtoken for the user.\n   * @param {Object} options - Request options.\n   * @param {String} [options.role] - Filters based on the User role.\n   * @param {Number} [options.limit] - Sets a maximum number of memberships to be returned per page.\n   * @param {Number} [options.pages = 1] - Sets a maximum number of pages to be returned. Defaults to 1. If set to false retrieves every available page.\n   * @param {String} [options.url] - Retrieve memberships from a specific URL. Usually retrieved from the `next` link header of a previous request.\n   * @param {Boolean} [options.resourceLinkId = false] - If set to true, retrieves resource Link level memberships.\n   */\n  async getMembers (idtoken, options) {\n    if (!idtoken) { provNamesAndRolesServiceDebug('Missing IdToken object.'); throw new Error('MISSING_ID_TOKEN') }\n    provNamesAndRolesServiceDebug('Attempting to retrieve memberships')\n    provNamesAndRolesServiceDebug('Target platform: ' + idtoken.iss)\n\n    const platform = await this.#getPlatform(idtoken.iss, idtoken.clientId, this.#ENCRYPTIONKEY, this.#Database)\n\n    if (!platform) {\n      provNamesAndRolesServiceDebug('Platform not found')\n      throw new Error('PLATFORM_NOT_FOUND')\n    }\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    provNamesAndRolesServiceDebug('Attempting to retrieve platform access_token for [' + idtoken.iss + ']')\n    const tokenRes = await platform.platformAccessToken('https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly')\n    provNamesAndRolesServiceDebug('Access_token retrieved for [' + idtoken.iss + ']')\n\n    let pages = 1 // Page limit\n    let query = []\n\n    let next = idtoken.platformContext.namesRoles.context_memberships_url\n    if (options) {\n      if (options.pages || options.pages === false) {\n        provNamesAndRolesServiceDebug('Maximum number of pages retrieved: ' + options.pages)\n        pages = options.pages\n      }\n      if (options.url) {\n        next = options.url\n        query = false\n      } else {\n        if (options.role) {\n          provNamesAndRolesServiceDebug('Adding role parameter with value: ' + options.role)\n          query.push(['role', options.role])\n        }\n        if (options.limit) {\n          provNamesAndRolesServiceDebug('Adding limit parameter with value: ' + options.limit)\n          query.push(['limit', options.limit])\n        }\n        if (options.resourceLinkId) {\n          provNamesAndRolesServiceDebug('Adding rlid parameter with value: ' + idtoken.platformContext.resource.id)\n          query.push(['rlid', idtoken.platformContext.resource.id])\n        }\n      }\n    }\n\n    if (query && query.length > 0) query = new URLSearchParams(query)\n    else query = false\n\n    let differences\n    let result\n    let curPage = 1\n\n    do {\n      if (pages && curPage > pages) {\n        if (next) result.next = next\n        break\n      }\n      let response\n      provNamesAndRolesServiceDebug('Member pages found: ', curPage)\n      provNamesAndRolesServiceDebug('Current member page: ', next)\n\n      if (query && curPage === 1) response = await got.get(next, { searchParams: query, headers: { Authorization: tokenRes.token_type + ' ' + tokenRes.access_token, Accept: 'application/vnd.ims.lti-nrps.v2.membershipcontainer+json' } })\n      else response = await got.get(next, { headers: { Authorization: tokenRes.token_type + ' ' + tokenRes.access_token, Accept: 'application/vnd.ims.lti-nrps.v2.membershipcontainer+json' } })\n\n      const headers = response.headers\n      const body = JSON.parse(response.body)\n\n      if (!result) result = JSON.parse(JSON.stringify(body))\n      else {\n        result.members = [\n          ...result.members,\n          ...body.members\n        ]\n      }\n\n      const parsedLinks = parseLink(headers.link)\n      // Trying to find \"rel=differences\" header\n      if (parsedLinks && parsedLinks.differences) differences = parsedLinks.differences.url\n      // Trying to find \"rel=next\" header, indicating additional pages\n      if (parsedLinks && parsedLinks.next) next = parsedLinks.next.url\n      else next = false\n      curPage++\n    } while (next)\n\n    if (differences) result.differences = differences\n    provNamesAndRolesServiceDebug('Memberships retrieved')\n    return result\n  }\n}\n\nexport default NamesAndRoles\n"],"mappings":"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","ignoreList":[]}