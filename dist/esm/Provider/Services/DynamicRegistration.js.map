{"version":3,"file":"DynamicRegistration.js","names":["got","crypto","_url","debug","Objects","provDynamicRegistrationDebug","_name","_classPrivateFieldLooseKey","_redirectUris","_customParameters","_autoActivate","_useDeepLinking","_logo","_description","_hostname","_appUrl","_loginUrl","_keysetUrl","_getPlatform","_registerPlatform","_ENCRYPTIONKEY","_Database","_buildUrl","_getHostname","DynamicRegistration","constructor","options","routes","registerPlatform","getPlatform","ENCRYPTIONKEY","Database","Object","defineProperty","value","_getHostname2","_buildUrl2","writable","_classPrivateFieldLooseBase","name","redirectUris","customParameters","autoActivate","useDeepLinking","undefined","logo","description","url","appRoute","loginRoute","keysetRoute","register","openidConfiguration","registrationToken","Error","configuration","get","json","issuer","messages","type","push","registration","deepMergeObjects","application_type","response_types","grant_types","initiate_login_uri","redirect_uris","client_name","jwks_uri","logo_uri","token_endpoint_auth_method","scope","domain","target_link_uri","custom_parameters","claims","claims_supported","registrationResponse","post","registration_endpoint","headers","Authorization","platformName","product_family_code","randomBytes","toString","client_id","platform","clientId","authenticationEndpoint","authorization_endpoint","accesstokenEndpoint","token_endpoint","authorizationServer","authorization_server","authConfig","method","key","registered","Insert","id","platformId","active","path","pathParts","parse","portMatch","pathname","match","port","split","join","formattedUrl","format","protocol","hostname","replace","auth","hash","search"],"sources":["../../../../src/esm/Provider/Services/DynamicRegistration.js"],"sourcesContent":["/* Provider Dynamic Registration Service */\nimport got from 'got'\nimport crypto from 'crypto'\nimport _url from 'fast-url-parser'\nimport debug from 'debug'\nimport Objects from '../../Utils/Objects.js'\n\nconst provDynamicRegistrationDebug = debug('provider:dynamicRegistrationService')\n\nclass DynamicRegistration {\n  #name\n\n  #redirectUris\n\n  #customParameters\n\n  #autoActivate\n\n  #useDeepLinking\n\n  #logo\n\n  #description\n\n  #hostname\n\n  #appUrl\n\n  #loginUrl\n\n  #keysetUrl\n\n  #getPlatform\n\n  #registerPlatform\n\n  #ENCRYPTIONKEY = ''\n\n  #Database\n\n  constructor (options, routes, registerPlatform, getPlatform, ENCRYPTIONKEY, Database) {\n    this.#name = options.name\n    this.#redirectUris = options.redirectUris || []\n    this.#customParameters = options.customParameters || {}\n    this.#autoActivate = options.autoActivate\n    this.#useDeepLinking = options.useDeepLinking === undefined ? true : options.useDeepLinking\n    this.#logo = options.logo\n    this.#description = options.description\n    this.#hostname = this.#getHostname(options.url)\n    this.#appUrl = this.#buildUrl(options.url, routes.appRoute)\n    this.#loginUrl = this.#buildUrl(options.url, routes.loginRoute)\n    this.#keysetUrl = this.#buildUrl(options.url, routes.keysetRoute)\n    this.#getPlatform = getPlatform\n    this.#registerPlatform = registerPlatform\n\n    this.#ENCRYPTIONKEY = ENCRYPTIONKEY\n    this.#Database = Database\n  }\n\n  // Helper method to build URLs\n  #buildUrl (url, path) {\n    if (path === '/') return url\n    const pathParts = _url.parse(url)\n    const portMatch = pathParts.pathname.match(/:[0-9]*/)\n    if (portMatch) {\n      pathParts.port = portMatch[0].split(':')[1]\n      pathParts.pathname = pathParts.pathname.split(portMatch[0]).join('')\n    }\n    const formattedUrl = _url.format({\n      protocol: pathParts.protocol,\n      hostname: pathParts.hostname,\n      pathname: (pathParts.pathname + path).replace('//', '/'),\n      port: pathParts.port,\n      auth: pathParts.auth,\n      hash: pathParts.hash,\n      search: pathParts.search\n    })\n    return formattedUrl\n  }\n\n  // Helper method to get the url hostname\n  #getHostname (url) {\n    const pathParts = _url.parse(url)\n    let hostname = pathParts.hostname\n    if (pathParts.port) hostname += ':' + pathParts.port\n    return hostname\n  }\n\n  /**\n   * @description Performs dynamic registration flow.\n   * @param {String} openidConfiguration - OpenID configuration URL. Retrieved from req.query.openid_configuration.\n   * @param {String} [registrationToken] - Registration Token. Retrieved from req.query.registration_token.\n   * @param {Object} [options] - Replacements or extensions to default registration options.\n   */\n  async register (openidConfiguration, registrationToken, options = {}) {\n    if (!openidConfiguration) throw new Error('MISSING_OPENID_CONFIGURATION')\n    provDynamicRegistrationDebug('Starting dynamic registration process')\n    // Get Platform registration configurations\n    const configuration = await got.get(openidConfiguration).json()\n    provDynamicRegistrationDebug('Attempting to register Platform with issuer: ', configuration.issuer)\n    // Building registration object\n    const messages = [{ type: 'LtiResourceLinkRequest' }]\n    if (this.#useDeepLinking) messages.push({ type: 'LtiDeepLinkingRequest' })\n    const registration = Objects.deepMergeObjects({\n      application_type: 'web',\n      response_types: ['id_token'],\n      grant_types: ['implicit', 'client_credentials'],\n      initiate_login_uri: this.#loginUrl,\n      redirect_uris: [...this.#redirectUris, this.#appUrl],\n      client_name: this.#name,\n      jwks_uri: this.#keysetUrl,\n      logo_uri: this.#logo,\n      token_endpoint_auth_method: 'private_key_jwt',\n      scope: 'https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly https://purl.imsglobal.org/spec/lti-ags/scope/lineitem https://purl.imsglobal.org/spec/lti-ags/scope/score https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly',\n      'https://purl.imsglobal.org/spec/lti-tool-configuration': {\n        domain: this.#hostname,\n        description: this.#description,\n        target_link_uri: this.#appUrl,\n        custom_parameters: this.#customParameters,\n        claims: configuration.claims_supported,\n        messages\n      }\n    }, options)\n    provDynamicRegistrationDebug('Tool registration request:')\n    provDynamicRegistrationDebug(registration)\n    provDynamicRegistrationDebug('Sending Tool registration request')\n    const registrationResponse = await got.post(configuration.registration_endpoint, { json: registration, headers: registrationToken ? { Authorization: 'Bearer ' + registrationToken } : undefined }).json()\n\n    // Registering Platform\n    const platformName = (configuration['https://purl.imsglobal.org/spec/lti-platform-configuration'] ? configuration['https://purl.imsglobal.org/spec/lti-platform-configuration'].product_family_code : 'Platform') + '_DynReg_' + crypto.randomBytes(16).toString('hex')\n\n    if (await this.#getPlatform(configuration.issuer, registrationResponse.client_id, this.#ENCRYPTIONKEY, this.#Database)) throw new Error('PLATFORM_ALREADY_REGISTERED')\n\n    provDynamicRegistrationDebug('Registering Platform')\n    const platform = {\n      url: configuration.issuer,\n      name: platformName,\n      clientId: registrationResponse.client_id,\n      authenticationEndpoint: configuration.authorization_endpoint,\n      accesstokenEndpoint: configuration.token_endpoint,\n      authorizationServer: configuration.authorization_server || configuration.token_endpoint,\n      authConfig: {\n        method: 'JWK_SET',\n        key: configuration.jwks_uri\n      }\n    }\n    const registered = await this.#registerPlatform(platform, this.#getPlatform, this.#ENCRYPTIONKEY, this.#Database)\n    await this.#Database.Insert(false, 'platformStatus', { id: await registered.platformId(), active: this.#autoActivate })\n\n    // Returing message indicating the end of registration flow\n    return '<script>(window.opener || window.parent).postMessage({subject:\"org.imsglobal.lti.close\"}, \"*\");</script>'\n  }\n}\n\nexport default DynamicRegistration\n"],"mappings":"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","ignoreList":[]}