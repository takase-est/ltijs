{"version":3,"file":"Database.js","names":["mongoose","crypto","debug","Schema","provDatabaseDebug","_dbUrl","_classPrivateFieldLooseKey","_dbConnection","_deploy","Database","constructor","database","Object","defineProperty","writable","value","useNewUrlParser","connectTimeoutMS","useUnifiedTopology","url","Error","_classPrivateFieldLooseBase","set","connection","idTokenSchema","iss","String","user","userInfo","JSON","platformInfo","clientId","platformId","deploymentId","createdAt","type","Date","expires","default","now","index","contextTokenSchema","contextId","roles","path","targetLinkUri","context","resource","custom","launchPresentation","messageType","version","deepLinkingSettings","lis","endpoint","namesRoles","platformSchema","platformUrl","platformName","authEndpoint","accesstokenEndpoint","authorizationServer","kid","authConfig","method","key","unique","platformStatusSchema","id","active","Boolean","keySchema","iv","data","accessTokenSchema","scopes","nonceSchema","nonce","stateSchema","state","query","model","err","db","setup","on","once","disconnect","setTimeout","readyState","connect","Close","removeAllListeners","close","Get","ENCRYPTIONKEY","collection","Model","result","find","select","i","temp","parse","Decrypt","length","Insert","item","newDocData","encrypted","Encrypt","stringify","newDoc","save","Replace","replaceOne","upsert","Modify","modification","newMod","findOne","keys","values","updateOne","Delete","deleteMany","secret","hash","createHash","update","digest","slice","randomBytes","cipher","createCipheriv","Buffer","concat","final","toString","_iv","from","encryptedText","decipher","createDecipheriv","decrypted"],"sources":["../../../src/esm/Utils/Database.js"],"sourcesContent":["import mongoose from 'mongoose'\nimport crypto from 'crypto'\nimport debug from 'debug'\n\nconst { Schema } = mongoose\nconst provDatabaseDebug = debug('provider:database')\n\n/**\n * @description Collection of static methods to manipulate the database.\n */\nclass Database {\n  #dbUrl\n\n  #dbConnection = {\n    useNewUrlParser: true,\n    connectTimeoutMS: 300000,\n    useUnifiedTopology: true\n  }\n\n  #deploy = false\n\n  /**\n   * @description Mongodb configuration setup\n   * @param {Object} database - Configuration object\n   */\n  constructor (database) {\n    if (!database || !database.url) throw new Error('MISSING_DATABASE_CONFIG')\n\n    // Configures database connection\n    this.#dbUrl = database.url\n    if (database.debug) mongoose.set('debug', true)\n\n    this.#dbConnection = {\n      ...this.#dbConnection,\n      ...database.connection\n    }\n\n    // Creating database schemas\n    const idTokenSchema = new Schema({\n      iss: String,\n      user: String,\n      userInfo: JSON,\n      platformInfo: JSON,\n      clientId: String,\n      platformId: String,\n      deploymentId: String,\n      createdAt: { type: Date, expires: 3600 * 24, default: Date.now }\n    })\n    idTokenSchema.index({ iss: 1, clientId: 1, deploymentId: 1, user: 1 })\n\n    const contextTokenSchema = new Schema({\n      contextId: String,\n      user: String,\n      roles: [String],\n      path: String,\n      targetLinkUri: String,\n      context: JSON,\n      resource: JSON,\n      custom: JSON,\n      launchPresentation: JSON,\n      messageType: String,\n      version: String,\n      deepLinkingSettings: JSON,\n      lis: JSON,\n      endpoint: JSON,\n      namesRoles: JSON,\n      createdAt: { type: Date, expires: 3600 * 24, default: Date.now }\n    })\n    contextTokenSchema.index({ contextId: 1, user: 1 })\n\n    const platformSchema = new Schema({\n      platformUrl: String,\n      platformName: String,\n      clientId: String,\n      authEndpoint: String,\n      accesstokenEndpoint: String,\n      authorizationServer: String,\n      kid: String,\n      authConfig: {\n        method: String,\n        key: String\n      }\n    })\n    platformSchema.index({ platformUrl: 1 })\n    platformSchema.index({ kid: 1 }, { unique: true })\n    platformSchema.index({ platformUrl: 1, clientId: 1 }, { unique: true })\n\n    const platformStatusSchema = new Schema({\n      id: String,\n      active: { type: Boolean, default: false }\n    })\n    platformStatusSchema.index({ id: 1 }, { unique: true })\n\n    const keySchema = new Schema({\n      kid: String,\n      platformUrl: String,\n      clientId: String,\n      iv: String,\n      data: String\n    })\n    keySchema.index({ kid: 1 }, { unique: true })\n\n    const accessTokenSchema = new Schema({\n      platformUrl: String,\n      clientId: String,\n      scopes: String,\n      iv: String,\n      data: String,\n      createdAt: { type: Date, expires: 3600, default: Date.now }\n    })\n    accessTokenSchema.index({ platformUrl: 1, clientId: 1, scopes: 1 }, { unique: true })\n\n    const nonceSchema = new Schema({\n      nonce: String,\n      createdAt: { type: Date, expires: 10, default: Date.now }\n    })\n    nonceSchema.index({ nonce: 1 })\n\n    const stateSchema = new Schema({\n      state: String,\n      query: JSON,\n      createdAt: { type: Date, expires: 600, default: Date.now }\n    })\n    stateSchema.index({ state: 1 }, { unique: true })\n\n    try {\n      mongoose.model('idtoken', idTokenSchema)\n      mongoose.model('contexttoken', contextTokenSchema)\n      mongoose.model('platform', platformSchema)\n      mongoose.model('platformStatus', platformStatusSchema)\n      mongoose.model('privatekey', keySchema)\n      mongoose.model('publickey', keySchema)\n      mongoose.model('accesstoken', accessTokenSchema)\n      mongoose.model('nonce', nonceSchema)\n      mongoose.model('state', stateSchema)\n    } catch (err) {\n      provDatabaseDebug('Model already registered. Continuing')\n    }\n\n    this.db = mongoose.connection\n  }\n\n  /**\n   * @description Opens connection to database\n   */\n  async setup () {\n    this.db.on('connected', async () => {\n      provDatabaseDebug('Database connected')\n    })\n    this.db.once('open', async () => {\n      provDatabaseDebug('Database connection open')\n    })\n    this.db.on('error', async () => {\n      mongoose.disconnect()\n    })\n    this.db.on('reconnected', async () => {\n      provDatabaseDebug('Database reconnected')\n    })\n    this.db.on('disconnected', async () => {\n      provDatabaseDebug('Database disconnected')\n      provDatabaseDebug('Attempting to reconnect')\n      setTimeout(async () => {\n        if (this.db.readyState === 0) {\n          try {\n            await mongoose.connect(this.#dbUrl, this.#dbConnection)\n          } catch (err) {\n            provDatabaseDebug('Error in MongoDb connection: ' + err)\n          }\n        }\n      }, 1000)\n    })\n\n    if (this.db.readyState === 0) await mongoose.connect(this.#dbUrl, this.#dbConnection)\n    this.#deploy = true\n    return true\n  }\n\n  // Closes connection to the database\n  async Close () {\n    mongoose.connection.removeAllListeners()\n    await mongoose.connection.close()\n    this.#deploy = false\n    return true\n  }\n\n  /**\n     * @description Get item or entire database.\n     * @param {String} ENCRYPTIONKEY - Encryptionkey of the database, false if none\n     * @param {String} collection - The collection to be accessed inside the database.\n     * @param {Object} [query] - Query for the item you are looking for in the format {type: \"type1\"}.\n     */\n  async Get (ENCRYPTIONKEY, collection, query) {\n    if (!this.#deploy) throw new Error('PROVIDER_NOT_DEPLOYED')\n    if (!collection) throw new Error('MISSING_COLLECTION')\n\n    const Model = mongoose.model(collection)\n    const result = await Model.find(query).select('-__v -_id')\n\n    if (ENCRYPTIONKEY) {\n      for (const i in result) {\n        const temp = result[i]\n        result[i] = JSON.parse(await this.Decrypt(result[i].data, result[i].iv, ENCRYPTIONKEY))\n        if (temp.createdAt) {\n          const createdAt = Date.parse(temp.createdAt)\n          result[i].createdAt = createdAt\n        }\n      }\n    }\n\n    if (result.length === 0) return false\n    return result\n  }\n\n  /**\n     * @description Insert item in database.\n     * @param {String} ENCRYPTIONKEY - Encryptionkey of the database, false if none.\n     * @param {String} collection - The collection to be accessed inside the database.\n     * @param {Object} item - The item Object you want to insert in the database.\n     * @param {Object} [index] - Key that should be used as index in case of Encrypted document.\n     */\n  async Insert (ENCRYPTIONKEY, collection, item, index) {\n    if (!this.#deploy) throw new Error('PROVIDER_NOT_DEPLOYED')\n    if (!collection || !item || (ENCRYPTIONKEY && !index)) throw new Error('MISSING_PARAMS')\n\n    const Model = mongoose.model(collection)\n    let newDocData = item\n    if (ENCRYPTIONKEY) {\n      const encrypted = await this.Encrypt(JSON.stringify(item), ENCRYPTIONKEY)\n      newDocData = {\n        ...index,\n        iv: encrypted.iv,\n        data: encrypted.data\n      }\n    }\n    const newDoc = new Model(newDocData)\n    await newDoc.save()\n    return true\n  }\n\n  /**\n   * @description Replace item in database. Creates a new document if it does not exist.\n   * @param {String} ENCRYPTIONKEY - Encryptionkey of the database, false if none.\n   * @param {String} collection - The collection to be accessed inside the database.\n   * @param {Object} query - Query for the item you are looking for in the format {type: \"type1\"}.\n   * @param {Object} item - The item Object you want to insert in the database.\n   * @param {Object} [index] - Key that should be used as index in case of Encrypted document.\n   */\n  async Replace (ENCRYPTIONKEY, collection, query, item, index) {\n    if (!this.#deploy) throw new Error('PROVIDER_NOT_DEPLOYED')\n    if (!collection || !item || (ENCRYPTIONKEY && !index)) throw new Error('MISSING_PARAMS')\n\n    const Model = mongoose.model(collection)\n    let newDocData = item\n    if (ENCRYPTIONKEY) {\n      const encrypted = await this.Encrypt(JSON.stringify(item), ENCRYPTIONKEY)\n      newDocData = {\n        ...index,\n        iv: encrypted.iv,\n        data: encrypted.data\n      }\n    }\n\n    await Model.replaceOne(query, newDocData, { upsert: true })\n    return true\n  }\n\n  /**\n     * @description Assign value to item in database\n     * @param {String} ENCRYPTIONKEY - Encryptionkey of the database, false if none.\n     * @param {String} collection - The collection to be accessed inside the database.\n     * @param {Object} query - The entry you want to modify in the format {type: \"type1\"}.\n     * @param {Object} modification - The modification you want to make in the format {type: \"type2\"}.\n     */\n  async Modify (ENCRYPTIONKEY, collection, query, modification) {\n    if (!this.#deploy) throw new Error('PROVIDER_NOT_DEPLOYED')\n    if (!collection || !query || !modification) throw new Error('MISSING_PARAMS')\n\n    const Model = mongoose.model(collection)\n\n    let newMod = modification\n    if (ENCRYPTIONKEY) {\n      let result = await Model.findOne(query)\n      if (result) {\n        result = JSON.parse(await this.Decrypt(result.data, result.iv, ENCRYPTIONKEY))\n        result[Object.keys(modification)[0]] = Object.values(modification)[0]\n        newMod = await this.Encrypt(JSON.stringify(result), ENCRYPTIONKEY)\n      }\n    }\n\n    await Model.updateOne(query, newMod)\n    return true\n  }\n\n  /**\n     * @description Delete item in database\n     * @param {String} collection - The collection to be accessed inside the database.\n     * @param {Object} query - The entry you want to delete in the format {type: \"type1\"}.\n     */\n  async Delete (collection, query) {\n    if (!this.#deploy) throw new Error('PROVIDER_NOT_DEPLOYED')\n    if (!collection || !query) throw new Error('MISSING_PARAMS')\n    const Model = mongoose.model(collection)\n    await Model.deleteMany(query)\n    return true\n  }\n\n  /**\n   * @description Encrypts data.\n   * @param {String} data - Data to be encrypted\n   * @param {String} secret - Secret used in the encryption\n   */\n  async Encrypt (data, secret) {\n    const hash = crypto.createHash('sha256')\n    hash.update(secret)\n    const key = hash.digest().slice(0, 32)\n    const iv = crypto.randomBytes(16)\n    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv)\n    let encrypted = cipher.update(data)\n    encrypted = Buffer.concat([encrypted, cipher.final()])\n    return { iv: iv.toString('hex'), data: encrypted.toString('hex') }\n  }\n\n  /**\n   * @description Decrypts data.\n   * @param {String} data - Data to be decrypted\n   * @param {String} _iv - Encryption iv\n   * @param {String} secret - Secret used in the encryption\n   */\n  async Decrypt (data, _iv, secret) {\n    const hash = crypto.createHash('sha256')\n    hash.update(secret)\n    const key = hash.digest().slice(0, 32)\n    const iv = Buffer.from(_iv, 'hex')\n    const encryptedText = Buffer.from(data, 'hex')\n    const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv)\n    let decrypted = decipher.update(encryptedText)\n    decrypted = Buffer.concat([decrypted, decipher.final()])\n    return decrypted.toString()\n  }\n}\n\nexport default Database\n"],"mappings":";;;AAAA,OAAOA,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAM;EAAEC;AAAO,CAAC,GAAGH,QAAQ;AAC3B,MAAMI,iBAAiB,GAAGF,KAAK,CAAC,mBAAmB,CAAC;;AAEpD;AACA;AACA;AAFA,IAAAG,MAAA,gBAAAC,0BAAA;AAAA,IAAAC,aAAA,gBAAAD,0BAAA;AAAA,IAAAE,OAAA,gBAAAF,0BAAA;AAGA,MAAMG,QAAQ,CAAC;EAWb;AACF;AACA;AACA;EACEC,WAAWA,CAAEC,QAAQ,EAAE;IAAAC,MAAA,CAAAC,cAAA,OAAAR,MAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAN,aAAA;MAAAO,QAAA;MAAAC,KAAA,EAZP;QACdC,eAAe,EAAE,IAAI;QACrBC,gBAAgB,EAAE,MAAM;QACxBC,kBAAkB,EAAE;MACtB;IAAC;IAAAN,MAAA,CAAAC,cAAA,OAAAL,OAAA;MAAAM,QAAA;MAAAC,KAAA,EAES;IAAK;IAOb,IAAI,CAACJ,QAAQ,IAAI,CAACA,QAAQ,CAACQ,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;IAE1E;IACAC,2BAAA,KAAI,EAAAhB,MAAA,EAAAA,MAAA,IAAUM,QAAQ,CAACQ,GAAG;IAC1B,IAAIR,QAAQ,CAACT,KAAK,EAAEF,QAAQ,CAACsB,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;IAE/CD,2BAAA,KAAI,EAAAd,aAAA,EAAAA,aAAA,IAAiB;MACnB,GAAAc,2BAAA,CAAG,IAAI,EAAAd,aAAA,EAAAA,aAAA,CAAc;MACrB,GAAGI,QAAQ,CAACY;IACd,CAAC;;IAED;IACA,MAAMC,aAAa,GAAG,IAAIrB,MAAM,CAAC;MAC/BsB,GAAG,EAAEC,MAAM;MACXC,IAAI,EAAED,MAAM;MACZE,QAAQ,EAAEC,IAAI;MACdC,YAAY,EAAED,IAAI;MAClBE,QAAQ,EAAEL,MAAM;MAChBM,UAAU,EAAEN,MAAM;MAClBO,YAAY,EAAEP,MAAM;MACpBQ,SAAS,EAAE;QAAEC,IAAI,EAAEC,IAAI;QAAEC,OAAO,EAAE,IAAI,GAAG,EAAE;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAI;IACjE,CAAC,CAAC;IACFf,aAAa,CAACgB,KAAK,CAAC;MAAEf,GAAG,EAAE,CAAC;MAAEM,QAAQ,EAAE,CAAC;MAAEE,YAAY,EAAE,CAAC;MAAEN,IAAI,EAAE;IAAE,CAAC,CAAC;IAEtE,MAAMc,kBAAkB,GAAG,IAAItC,MAAM,CAAC;MACpCuC,SAAS,EAAEhB,MAAM;MACjBC,IAAI,EAAED,MAAM;MACZiB,KAAK,EAAE,CAACjB,MAAM,CAAC;MACfkB,IAAI,EAAElB,MAAM;MACZmB,aAAa,EAAEnB,MAAM;MACrBoB,OAAO,EAAEjB,IAAI;MACbkB,QAAQ,EAAElB,IAAI;MACdmB,MAAM,EAAEnB,IAAI;MACZoB,kBAAkB,EAAEpB,IAAI;MACxBqB,WAAW,EAAExB,MAAM;MACnByB,OAAO,EAAEzB,MAAM;MACf0B,mBAAmB,EAAEvB,IAAI;MACzBwB,GAAG,EAAExB,IAAI;MACTyB,QAAQ,EAAEzB,IAAI;MACd0B,UAAU,EAAE1B,IAAI;MAChBK,SAAS,EAAE;QAAEC,IAAI,EAAEC,IAAI;QAAEC,OAAO,EAAE,IAAI,GAAG,EAAE;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAI;IACjE,CAAC,CAAC;IACFE,kBAAkB,CAACD,KAAK,CAAC;MAAEE,SAAS,EAAE,CAAC;MAAEf,IAAI,EAAE;IAAE,CAAC,CAAC;IAEnD,MAAM6B,cAAc,GAAG,IAAIrD,MAAM,CAAC;MAChCsD,WAAW,EAAE/B,MAAM;MACnBgC,YAAY,EAAEhC,MAAM;MACpBK,QAAQ,EAAEL,MAAM;MAChBiC,YAAY,EAAEjC,MAAM;MACpBkC,mBAAmB,EAAElC,MAAM;MAC3BmC,mBAAmB,EAAEnC,MAAM;MAC3BoC,GAAG,EAAEpC,MAAM;MACXqC,UAAU,EAAE;QACVC,MAAM,EAAEtC,MAAM;QACduC,GAAG,EAAEvC;MACP;IACF,CAAC,CAAC;IACF8B,cAAc,CAAChB,KAAK,CAAC;MAAEiB,WAAW,EAAE;IAAE,CAAC,CAAC;IACxCD,cAAc,CAAChB,KAAK,CAAC;MAAEsB,GAAG,EAAE;IAAE,CAAC,EAAE;MAAEI,MAAM,EAAE;IAAK,CAAC,CAAC;IAClDV,cAAc,CAAChB,KAAK,CAAC;MAAEiB,WAAW,EAAE,CAAC;MAAE1B,QAAQ,EAAE;IAAE,CAAC,EAAE;MAAEmC,MAAM,EAAE;IAAK,CAAC,CAAC;IAEvE,MAAMC,oBAAoB,GAAG,IAAIhE,MAAM,CAAC;MACtCiE,EAAE,EAAE1C,MAAM;MACV2C,MAAM,EAAE;QAAElC,IAAI,EAAEmC,OAAO;QAAEhC,OAAO,EAAE;MAAM;IAC1C,CAAC,CAAC;IACF6B,oBAAoB,CAAC3B,KAAK,CAAC;MAAE4B,EAAE,EAAE;IAAE,CAAC,EAAE;MAAEF,MAAM,EAAE;IAAK,CAAC,CAAC;IAEvD,MAAMK,SAAS,GAAG,IAAIpE,MAAM,CAAC;MAC3B2D,GAAG,EAAEpC,MAAM;MACX+B,WAAW,EAAE/B,MAAM;MACnBK,QAAQ,EAAEL,MAAM;MAChB8C,EAAE,EAAE9C,MAAM;MACV+C,IAAI,EAAE/C;IACR,CAAC,CAAC;IACF6C,SAAS,CAAC/B,KAAK,CAAC;MAAEsB,GAAG,EAAE;IAAE,CAAC,EAAE;MAAEI,MAAM,EAAE;IAAK,CAAC,CAAC;IAE7C,MAAMQ,iBAAiB,GAAG,IAAIvE,MAAM,CAAC;MACnCsD,WAAW,EAAE/B,MAAM;MACnBK,QAAQ,EAAEL,MAAM;MAChBiD,MAAM,EAAEjD,MAAM;MACd8C,EAAE,EAAE9C,MAAM;MACV+C,IAAI,EAAE/C,MAAM;MACZQ,SAAS,EAAE;QAAEC,IAAI,EAAEC,IAAI;QAAEC,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAI;IAC5D,CAAC,CAAC;IACFmC,iBAAiB,CAAClC,KAAK,CAAC;MAAEiB,WAAW,EAAE,CAAC;MAAE1B,QAAQ,EAAE,CAAC;MAAE4C,MAAM,EAAE;IAAE,CAAC,EAAE;MAAET,MAAM,EAAE;IAAK,CAAC,CAAC;IAErF,MAAMU,WAAW,GAAG,IAAIzE,MAAM,CAAC;MAC7B0E,KAAK,EAAEnD,MAAM;MACbQ,SAAS,EAAE;QAAEC,IAAI,EAAEC,IAAI;QAAEC,OAAO,EAAE,EAAE;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAI;IAC1D,CAAC,CAAC;IACFqC,WAAW,CAACpC,KAAK,CAAC;MAAEqC,KAAK,EAAE;IAAE,CAAC,CAAC;IAE/B,MAAMC,WAAW,GAAG,IAAI3E,MAAM,CAAC;MAC7B4E,KAAK,EAAErD,MAAM;MACbsD,KAAK,EAAEnD,IAAI;MACXK,SAAS,EAAE;QAAEC,IAAI,EAAEC,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAI;IAC3D,CAAC,CAAC;IACFuC,WAAW,CAACtC,KAAK,CAAC;MAAEuC,KAAK,EAAE;IAAE,CAAC,EAAE;MAAEb,MAAM,EAAE;IAAK,CAAC,CAAC;IAEjD,IAAI;MACFlE,QAAQ,CAACiF,KAAK,CAAC,SAAS,EAAEzD,aAAa,CAAC;MACxCxB,QAAQ,CAACiF,KAAK,CAAC,cAAc,EAAExC,kBAAkB,CAAC;MAClDzC,QAAQ,CAACiF,KAAK,CAAC,UAAU,EAAEzB,cAAc,CAAC;MAC1CxD,QAAQ,CAACiF,KAAK,CAAC,gBAAgB,EAAEd,oBAAoB,CAAC;MACtDnE,QAAQ,CAACiF,KAAK,CAAC,YAAY,EAAEV,SAAS,CAAC;MACvCvE,QAAQ,CAACiF,KAAK,CAAC,WAAW,EAAEV,SAAS,CAAC;MACtCvE,QAAQ,CAACiF,KAAK,CAAC,aAAa,EAAEP,iBAAiB,CAAC;MAChD1E,QAAQ,CAACiF,KAAK,CAAC,OAAO,EAAEL,WAAW,CAAC;MACpC5E,QAAQ,CAACiF,KAAK,CAAC,OAAO,EAAEH,WAAW,CAAC;IACtC,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ9E,iBAAiB,CAAC,sCAAsC,CAAC;IAC3D;IAEA,IAAI,CAAC+E,EAAE,GAAGnF,QAAQ,CAACuB,UAAU;EAC/B;;EAEA;AACF;AACA;EACE,MAAM6D,KAAKA,CAAA,EAAI;IACb,IAAI,CAACD,EAAE,CAACE,EAAE,CAAC,WAAW,EAAE,YAAY;MAClCjF,iBAAiB,CAAC,oBAAoB,CAAC;IACzC,CAAC,CAAC;IACF,IAAI,CAAC+E,EAAE,CAACG,IAAI,CAAC,MAAM,EAAE,YAAY;MAC/BlF,iBAAiB,CAAC,0BAA0B,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAAC+E,EAAE,CAACE,EAAE,CAAC,OAAO,EAAE,YAAY;MAC9BrF,QAAQ,CAACuF,UAAU,CAAC,CAAC;IACvB,CAAC,CAAC;IACF,IAAI,CAACJ,EAAE,CAACE,EAAE,CAAC,aAAa,EAAE,YAAY;MACpCjF,iBAAiB,CAAC,sBAAsB,CAAC;IAC3C,CAAC,CAAC;IACF,IAAI,CAAC+E,EAAE,CAACE,EAAE,CAAC,cAAc,EAAE,YAAY;MACrCjF,iBAAiB,CAAC,uBAAuB,CAAC;MAC1CA,iBAAiB,CAAC,yBAAyB,CAAC;MAC5CoF,UAAU,CAAC,YAAY;QACrB,IAAI,IAAI,CAACL,EAAE,CAACM,UAAU,KAAK,CAAC,EAAE;UAC5B,IAAI;YACF,MAAMzF,QAAQ,CAAC0F,OAAO,CAAArE,2BAAA,CAAC,IAAI,EAAAhB,MAAA,EAAAA,MAAA,GAAAgB,2BAAA,CAAS,IAAI,EAAAd,aAAA,EAAAA,aAAA,CAAc,CAAC;UACzD,CAAC,CAAC,OAAO2E,GAAG,EAAE;YACZ9E,iBAAiB,CAAC,+BAA+B,GAAG8E,GAAG,CAAC;UAC1D;QACF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;IAEF,IAAI,IAAI,CAACC,EAAE,CAACM,UAAU,KAAK,CAAC,EAAE,MAAMzF,QAAQ,CAAC0F,OAAO,CAAArE,2BAAA,CAAC,IAAI,EAAAhB,MAAA,EAAAA,MAAA,GAAAgB,2BAAA,CAAS,IAAI,EAAAd,aAAA,EAAAA,aAAA,CAAc,CAAC;IACrFc,2BAAA,KAAI,EAAAb,OAAA,EAAAA,OAAA,IAAW,IAAI;IACnB,OAAO,IAAI;EACb;;EAEA;EACA,MAAMmF,KAAKA,CAAA,EAAI;IACb3F,QAAQ,CAACuB,UAAU,CAACqE,kBAAkB,CAAC,CAAC;IACxC,MAAM5F,QAAQ,CAACuB,UAAU,CAACsE,KAAK,CAAC,CAAC;IACjCxE,2BAAA,KAAI,EAAAb,OAAA,EAAAA,OAAA,IAAW,KAAK;IACpB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMsF,GAAGA,CAAEC,aAAa,EAAEC,UAAU,EAAEhB,KAAK,EAAE;IAC3C,IAAI,CAAA3D,2BAAA,CAAC,IAAI,EAAAb,OAAA,EAAAA,OAAA,CAAQ,EAAE,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC3D,IAAI,CAAC4E,UAAU,EAAE,MAAM,IAAI5E,KAAK,CAAC,oBAAoB,CAAC;IAEtD,MAAM6E,KAAK,GAAGjG,QAAQ,CAACiF,KAAK,CAACe,UAAU,CAAC;IACxC,MAAME,MAAM,GAAG,MAAMD,KAAK,CAACE,IAAI,CAACnB,KAAK,CAAC,CAACoB,MAAM,CAAC,WAAW,CAAC;IAE1D,IAAIL,aAAa,EAAE;MACjB,KAAK,MAAMM,CAAC,IAAIH,MAAM,EAAE;QACtB,MAAMI,IAAI,GAAGJ,MAAM,CAACG,CAAC,CAAC;QACtBH,MAAM,CAACG,CAAC,CAAC,GAAGxE,IAAI,CAAC0E,KAAK,CAAC,MAAM,IAAI,CAACC,OAAO,CAACN,MAAM,CAACG,CAAC,CAAC,CAAC5B,IAAI,EAAEyB,MAAM,CAACG,CAAC,CAAC,CAAC7B,EAAE,EAAEuB,aAAa,CAAC,CAAC;QACvF,IAAIO,IAAI,CAACpE,SAAS,EAAE;UAClB,MAAMA,SAAS,GAAGE,IAAI,CAACmE,KAAK,CAACD,IAAI,CAACpE,SAAS,CAAC;UAC5CgE,MAAM,CAACG,CAAC,CAAC,CAACnE,SAAS,GAAGA,SAAS;QACjC;MACF;IACF;IAEA,IAAIgE,MAAM,CAACO,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;IACrC,OAAOP,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMQ,MAAMA,CAAEX,aAAa,EAAEC,UAAU,EAAEW,IAAI,EAAEnE,KAAK,EAAE;IACpD,IAAI,CAAAnB,2BAAA,CAAC,IAAI,EAAAb,OAAA,EAAAA,OAAA,CAAQ,EAAE,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC3D,IAAI,CAAC4E,UAAU,IAAI,CAACW,IAAI,IAAKZ,aAAa,IAAI,CAACvD,KAAM,EAAE,MAAM,IAAIpB,KAAK,CAAC,gBAAgB,CAAC;IAExF,MAAM6E,KAAK,GAAGjG,QAAQ,CAACiF,KAAK,CAACe,UAAU,CAAC;IACxC,IAAIY,UAAU,GAAGD,IAAI;IACrB,IAAIZ,aAAa,EAAE;MACjB,MAAMc,SAAS,GAAG,MAAM,IAAI,CAACC,OAAO,CAACjF,IAAI,CAACkF,SAAS,CAACJ,IAAI,CAAC,EAAEZ,aAAa,CAAC;MACzEa,UAAU,GAAG;QACX,GAAGpE,KAAK;QACRgC,EAAE,EAAEqC,SAAS,CAACrC,EAAE;QAChBC,IAAI,EAAEoC,SAAS,CAACpC;MAClB,CAAC;IACH;IACA,MAAMuC,MAAM,GAAG,IAAIf,KAAK,CAACW,UAAU,CAAC;IACpC,MAAMI,MAAM,CAACC,IAAI,CAAC,CAAC;IACnB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,OAAOA,CAAEnB,aAAa,EAAEC,UAAU,EAAEhB,KAAK,EAAE2B,IAAI,EAAEnE,KAAK,EAAE;IAC5D,IAAI,CAAAnB,2BAAA,CAAC,IAAI,EAAAb,OAAA,EAAAA,OAAA,CAAQ,EAAE,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC3D,IAAI,CAAC4E,UAAU,IAAI,CAACW,IAAI,IAAKZ,aAAa,IAAI,CAACvD,KAAM,EAAE,MAAM,IAAIpB,KAAK,CAAC,gBAAgB,CAAC;IAExF,MAAM6E,KAAK,GAAGjG,QAAQ,CAACiF,KAAK,CAACe,UAAU,CAAC;IACxC,IAAIY,UAAU,GAAGD,IAAI;IACrB,IAAIZ,aAAa,EAAE;MACjB,MAAMc,SAAS,GAAG,MAAM,IAAI,CAACC,OAAO,CAACjF,IAAI,CAACkF,SAAS,CAACJ,IAAI,CAAC,EAAEZ,aAAa,CAAC;MACzEa,UAAU,GAAG;QACX,GAAGpE,KAAK;QACRgC,EAAE,EAAEqC,SAAS,CAACrC,EAAE;QAChBC,IAAI,EAAEoC,SAAS,CAACpC;MAClB,CAAC;IACH;IAEA,MAAMwB,KAAK,CAACkB,UAAU,CAACnC,KAAK,EAAE4B,UAAU,EAAE;MAAEQ,MAAM,EAAE;IAAK,CAAC,CAAC;IAC3D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,MAAMA,CAAEtB,aAAa,EAAEC,UAAU,EAAEhB,KAAK,EAAEsC,YAAY,EAAE;IAC5D,IAAI,CAAAjG,2BAAA,CAAC,IAAI,EAAAb,OAAA,EAAAA,OAAA,CAAQ,EAAE,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC3D,IAAI,CAAC4E,UAAU,IAAI,CAAChB,KAAK,IAAI,CAACsC,YAAY,EAAE,MAAM,IAAIlG,KAAK,CAAC,gBAAgB,CAAC;IAE7E,MAAM6E,KAAK,GAAGjG,QAAQ,CAACiF,KAAK,CAACe,UAAU,CAAC;IAExC,IAAIuB,MAAM,GAAGD,YAAY;IACzB,IAAIvB,aAAa,EAAE;MACjB,IAAIG,MAAM,GAAG,MAAMD,KAAK,CAACuB,OAAO,CAACxC,KAAK,CAAC;MACvC,IAAIkB,MAAM,EAAE;QACVA,MAAM,GAAGrE,IAAI,CAAC0E,KAAK,CAAC,MAAM,IAAI,CAACC,OAAO,CAACN,MAAM,CAACzB,IAAI,EAAEyB,MAAM,CAAC1B,EAAE,EAAEuB,aAAa,CAAC,CAAC;QAC9EG,MAAM,CAACtF,MAAM,CAAC6G,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG1G,MAAM,CAAC8G,MAAM,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC;QACrEC,MAAM,GAAG,MAAM,IAAI,CAACT,OAAO,CAACjF,IAAI,CAACkF,SAAS,CAACb,MAAM,CAAC,EAAEH,aAAa,CAAC;MACpE;IACF;IAEA,MAAME,KAAK,CAAC0B,SAAS,CAAC3C,KAAK,EAAEuC,MAAM,CAAC;IACpC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMK,MAAMA,CAAE5B,UAAU,EAAEhB,KAAK,EAAE;IAC/B,IAAI,CAAA3D,2BAAA,CAAC,IAAI,EAAAb,OAAA,EAAAA,OAAA,CAAQ,EAAE,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC3D,IAAI,CAAC4E,UAAU,IAAI,CAAChB,KAAK,EAAE,MAAM,IAAI5D,KAAK,CAAC,gBAAgB,CAAC;IAC5D,MAAM6E,KAAK,GAAGjG,QAAQ,CAACiF,KAAK,CAACe,UAAU,CAAC;IACxC,MAAMC,KAAK,CAAC4B,UAAU,CAAC7C,KAAK,CAAC;IAC7B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM8B,OAAOA,CAAErC,IAAI,EAAEqD,MAAM,EAAE;IAC3B,MAAMC,IAAI,GAAG9H,MAAM,CAAC+H,UAAU,CAAC,QAAQ,CAAC;IACxCD,IAAI,CAACE,MAAM,CAACH,MAAM,CAAC;IACnB,MAAM7D,GAAG,GAAG8D,IAAI,CAACG,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACtC,MAAM3D,EAAE,GAAGvE,MAAM,CAACmI,WAAW,CAAC,EAAE,CAAC;IACjC,MAAMC,MAAM,GAAGpI,MAAM,CAACqI,cAAc,CAAC,aAAa,EAAErE,GAAG,EAAEO,EAAE,CAAC;IAC5D,IAAIqC,SAAS,GAAGwB,MAAM,CAACJ,MAAM,CAACxD,IAAI,CAAC;IACnCoC,SAAS,GAAG0B,MAAM,CAACC,MAAM,CAAC,CAAC3B,SAAS,EAAEwB,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;IACtD,OAAO;MAAEjE,EAAE,EAAEA,EAAE,CAACkE,QAAQ,CAAC,KAAK,CAAC;MAAEjE,IAAI,EAAEoC,SAAS,CAAC6B,QAAQ,CAAC,KAAK;IAAE,CAAC;EACpE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMlC,OAAOA,CAAE/B,IAAI,EAAEkE,GAAG,EAAEb,MAAM,EAAE;IAChC,MAAMC,IAAI,GAAG9H,MAAM,CAAC+H,UAAU,CAAC,QAAQ,CAAC;IACxCD,IAAI,CAACE,MAAM,CAACH,MAAM,CAAC;IACnB,MAAM7D,GAAG,GAAG8D,IAAI,CAACG,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACtC,MAAM3D,EAAE,GAAG+D,MAAM,CAACK,IAAI,CAACD,GAAG,EAAE,KAAK,CAAC;IAClC,MAAME,aAAa,GAAGN,MAAM,CAACK,IAAI,CAACnE,IAAI,EAAE,KAAK,CAAC;IAC9C,MAAMqE,QAAQ,GAAG7I,MAAM,CAAC8I,gBAAgB,CAAC,aAAa,EAAER,MAAM,CAACK,IAAI,CAAC3E,GAAG,CAAC,EAAEO,EAAE,CAAC;IAC7E,IAAIwE,SAAS,GAAGF,QAAQ,CAACb,MAAM,CAACY,aAAa,CAAC;IAC9CG,SAAS,GAAGT,MAAM,CAACC,MAAM,CAAC,CAACQ,SAAS,EAAEF,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;IACxD,OAAOO,SAAS,CAACN,QAAQ,CAAC,CAAC;EAC7B;AACF;AAEA,eAAejI,QAAQ","ignoreList":[]}