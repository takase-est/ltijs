{"version":3,"file":"Keyset.js","names":["Jwk","debug","provKeysetDebug","Keyset","build","Database","ENCRYPTIONKEY","keys","Get","keyset","key","jwk","import","pem","kid","alg","use","push"],"sources":["../../../src/esm/Utils/Keyset.js"],"sourcesContent":["/* Handle jwk keyset generation */\nimport Jwk from 'rasha'\nimport debug from 'debug'\n\nconst provKeysetDebug = debug('provider:keyset')\n\nclass Keyset {\n  /**\n     * @description Handles the creation of jwk keyset.\n     */\n  static async build (Database, ENCRYPTIONKEY) {\n    provKeysetDebug('Generating JWK keyset')\n    const keys = await Database.Get(ENCRYPTIONKEY, 'publickey') || []\n    const keyset = { keys: [] }\n    for (const key of keys) {\n      const jwk = await Jwk.import({ pem: key.key })\n      jwk.kid = key.kid\n      jwk.alg = 'RS256'\n      jwk.use = 'sig'\n      keyset.keys.push(jwk)\n    }\n    return keyset\n  }\n}\n\nexport default Keyset\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAGD,KAAK,CAAC,iBAAiB,CAAC;AAEhD,MAAME,MAAM,CAAC;EACX;AACF;AACA;EACE,aAAaC,KAAKA,CAAEC,QAAQ,EAAEC,aAAa,EAAE;IAC3CJ,eAAe,CAAC,uBAAuB,CAAC;IACxC,MAAMK,IAAI,GAAG,OAAMF,QAAQ,CAACG,GAAG,CAACF,aAAa,EAAE,WAAW,CAAC,KAAI,EAAE;IACjE,MAAMG,MAAM,GAAG;MAAEF,IAAI,EAAE;IAAG,CAAC;IAC3B,KAAK,MAAMG,GAAG,IAAIH,IAAI,EAAE;MACtB,MAAMI,GAAG,GAAG,MAAMX,GAAG,CAACY,MAAM,CAAC;QAAEC,GAAG,EAAEH,GAAG,CAACA;MAAI,CAAC,CAAC;MAC9CC,GAAG,CAACG,GAAG,GAAGJ,GAAG,CAACI,GAAG;MACjBH,GAAG,CAACI,GAAG,GAAG,OAAO;MACjBJ,GAAG,CAACK,GAAG,GAAG,KAAK;MACfP,MAAM,CAACF,IAAI,CAACU,IAAI,CAACN,GAAG,CAAC;IACvB;IACA,OAAOF,MAAM;EACf;AACF;AAEA,eAAeN,MAAM","ignoreList":[]}