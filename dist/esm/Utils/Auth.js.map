{"version":3,"file":"Auth.js","names":["crypto","Jwk","got","jwt","debug","provAuthDebug","Auth","generatePlatformKeyPair","ENCRYPTIONKEY","Database","platformUrl","platformClientId","kid","randomBytes","toString","Get","keys","generateKeyPairSync","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","publicKey","privateKey","pubkeyobj","key","privkeyobj","Replace","clientId","validateToken","token","devMode","validationParameters","getPlatform","decoded","decode","complete","Error","header","alg","iss","payload","platform","Array","isArray","aud","platformActive","authConfig","platformAuthConfig","method","keysEndpoint","res","get","json","keyset","jwk","find","export","verified","verifyToken","JSON","parse","verify","algorithms","clockTimestamp","Date","now","oidcValidation","claimValidation","platformId","platformKid","validateAud","validateAlg","maxAge","validateMaxAge","nonce","validateNonce","Promise","all","azp","iat","exp","curTime","timePassed","Insert","id","sub","getAccessToken","scopes","confjwt","platformAuthorizationServer","jti","encodeURIComponent","map","_","Math","random","join","sign","platformPrivateKey","algorithm","expiresIn","keyid","message","grant_type","client_assertion_type","client_assertion","scope","access","post","platformAccessTokenEndpoint","form"],"sources":["../../../src/esm/Utils/Auth.js"],"sourcesContent":["import crypto from 'crypto'\nimport Jwk from 'rasha'\nimport got from 'got'\nimport jwt from 'jsonwebtoken'\nimport debug from 'debug'\n// const cons_authdebug = require('debug')('consumer:auth')\n\nconst provAuthDebug = debug('provider:auth')\n\n/**\n * @description Authentication class manages RSA keys and validation of tokens.\n */\nclass Auth {\n  /**\n     * @description Generates a new keypair for a platform.\n     * @param {String} ENCRYPTIONKEY - Encryption key.\n     * @returns {String} kid for the keypair.\n     */\n  static async generatePlatformKeyPair (ENCRYPTIONKEY, Database, platformUrl, platformClientId) {\n    let kid = crypto.randomBytes(16).toString('hex')\n\n    while (await Database.Get(false, 'publickey', { kid })) {\n      /* istanbul ignore next */\n      kid = crypto.randomBytes(16).toString('hex')\n    }\n\n    const keys = crypto.generateKeyPairSync('rsa', {\n      modulusLength: 4096,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs1',\n        format: 'pem'\n      }\n    })\n\n    const { publicKey, privateKey } = keys\n\n    const pubkeyobj = {\n      key: publicKey,\n      kid\n    }\n    const privkeyobj = {\n      key: privateKey,\n      kid\n    }\n\n    await Database.Replace(ENCRYPTIONKEY, 'publickey', { platformUrl, clientId: platformClientId }, pubkeyobj, { kid, platformUrl, clientId: platformClientId })\n    await Database.Replace(ENCRYPTIONKEY, 'privatekey', { platformUrl, clientId: platformClientId }, privkeyobj, { kid, platformUrl, clientId: platformClientId })\n\n    return kid\n  }\n\n  /**\n     * @description Resolves a promisse if the token is valid following LTI 1.3 standards.\n     * @param {String} token - JWT token to be verified.\n     * @param {Boolean} devMode - DevMode option.\n     * @param {Object} validationParameters - Stored validation parameters retrieved from database.\n     * @param {Function} getPlatform - getPlatform function to get the platform that originated the token.\n     * @param {String} ENCRYPTIONKEY - Encription key.\n     * @returns {Promise}\n     */\n  static async validateToken (token, devMode, validationParameters, getPlatform, ENCRYPTIONKEY, Database) {\n    const decoded = jwt.decode(token, { complete: true })\n    if (!decoded) throw new Error('INVALID_JWT_RECEIVED')\n\n    const kid = decoded.header.kid\n    validationParameters.alg = decoded.header.alg\n\n    provAuthDebug('Attempting to validate iss claim')\n    provAuthDebug('Request Iss claim: ' + validationParameters.iss)\n    provAuthDebug('Response Iss claim: ' + decoded.payload.iss)\n    if (!validationParameters.iss) {\n      if (!devMode) throw new Error('MISSING_VALIDATION_COOKIE')\n      else { provAuthDebug('Dev Mode enabled: Missing state validation cookies will be ignored') }\n    } else if (validationParameters.iss !== decoded.payload.iss) throw new Error('ISS_CLAIM_DOES_NOT_MATCH')\n\n    provAuthDebug('Attempting to retrieve registered platform')\n    let platform\n    if (!Array.isArray(decoded.payload.aud)) platform = await getPlatform(decoded.payload.iss, decoded.payload.aud, ENCRYPTIONKEY, Database)\n    else {\n      for (const aud of decoded.payload.aud) {\n        platform = await getPlatform(decoded.payload.iss, aud, ENCRYPTIONKEY, Database)\n        if (platform) break\n      }\n    }\n    if (!platform) throw new Error('UNREGISTERED_PLATFORM')\n    const platformActive = await platform.platformActive()\n    if (!platformActive) throw new Error('PLATFORM_NOT_ACTIVATED')\n\n    const authConfig = await platform.platformAuthConfig()\n    /* istanbul ignore next */\n    switch (authConfig.method) {\n      case 'JWK_SET': {\n        provAuthDebug('Retrieving key from jwk_set')\n        if (!kid) throw new Error('KID_NOT_FOUND')\n\n        const keysEndpoint = authConfig.key\n        const res = await got.get(keysEndpoint).json()\n        const keyset = res.keys\n        if (!keyset) throw new Error('KEYSET_NOT_FOUND')\n        const jwk = keyset.find(key => {\n          return key.kid === kid\n        })\n        if (!jwk) throw new Error('KEY_NOT_FOUND')\n        provAuthDebug('Converting JWK key to PEM key')\n        const key = await Jwk.export({ jwk })\n        const verified = await this.verifyToken(token, key, validationParameters, platform, Database)\n        return (verified)\n      }\n      case 'JWK_KEY': {\n        provAuthDebug('Retrieving key from jwk_key')\n        if (!authConfig.key) throw new Error('KEY_NOT_FOUND')\n        provAuthDebug('Converting JWK key to PEM key')\n        let jwk = authConfig.key\n        if (typeof jwk === 'string') jwk = JSON.parse(jwk)\n        const key = await Jwk.export({ jwk })\n        const verified = await this.verifyToken(token, key, validationParameters, platform, Database)\n        return (verified)\n      }\n      case 'RSA_KEY': {\n        provAuthDebug('Retrieving key from rsa_key')\n        const key = authConfig.key\n        if (!key) throw new Error('KEY_NOT_FOUND')\n        const verified = await this.verifyToken(token, key, validationParameters, platform, Database)\n        return (verified)\n      }\n      default: {\n        provAuthDebug('No auth configuration found for platform')\n        throw new Error('AUTHCONFIG_NOT_FOUND')\n      }\n    }\n  }\n\n  /**\n     * @description Verifies a token.\n     * @param {Object} token - Token to be verified.\n     * @param {String} key - Key to verify the token.\n     * @param {Object} validationParameters - Validation Parameters.\n     * @param {Platform} platform - Issuer platform.\n     */\n  static async verifyToken (token, key, validationParameters, platform, Database) {\n    provAuthDebug('Attempting to verify JWT with the given key')\n    const verified = jwt.verify(token, key, {\n      algorithms: [validationParameters.alg],\n      clockTimestamp: Date.now() / 1000\n    })\n    await this.oidcValidation(verified, platform, validationParameters, Database)\n    await this.claimValidation(verified)\n\n    // Adding clientId and platformId information to token\n    verified.clientId = await platform.platformClientId()\n    verified.platformId = await platform.platformKid()\n    return verified\n  }\n\n  /**\n     * @description Validates de token based on the OIDC specifications.\n     * @param {Object} token - Id token you wish to validate.\n     * @param {Platform} platform - Platform object.\n     * @param {Object} validationParameters - Validation parameters.\n     */\n  static async oidcValidation (token, platform, validationParameters, Database) {\n    provAuthDebug('Token signature verified')\n    provAuthDebug('Initiating OIDC aditional validation steps')\n\n    const aud = this.validateAud(token, platform)\n    const alg = this.validateAlg(validationParameters.alg)\n    const maxAge = this.validateMaxAge(token, validationParameters.maxAge)\n    const nonce = this.validateNonce(token, Database)\n\n    return Promise.all([aud, alg, maxAge, nonce])\n  }\n\n  /**\n     * @description Validates Aud.\n     * @param {Object} token - Id token you wish to validate.\n     * @param {Platform} platform - Platform object.\n     */\n  static async validateAud (token, platform) {\n    provAuthDebug(\"Validating if aud (Audience) claim matches the value of the tool's clientId given by the platform\")\n    provAuthDebug('Aud claim: ' + token.aud)\n    provAuthDebug(\"Tool's clientId: \" + await platform.platformClientId())\n    if (Array.isArray(token.aud)) {\n      provAuthDebug('More than one aud listed, searching for azp claim')\n      if (token.azp && token.azp !== await platform.platformClientId()) throw new Error('AZP_DOES_NOT_MATCH_CLIENTID')\n    }\n    return true\n  }\n\n  /**\n     * @description Validates Aug.\n     * @param {String} alg - Algorithm used.\n     */\n  static async validateAlg (alg) {\n    provAuthDebug('Checking alg claim. Alg: ' + alg)\n    if (alg !== 'RS256') throw new Error('ALG_NOT_RS256')\n    return true\n  }\n\n  /**\n     * @description Validates token max age.\n     * @param {Object} token - Id token you wish to validate.\n     * @param {Number} maxAge - Max age allowed for the token.\n     */\n  static async validateMaxAge (token, maxAge) {\n    provAuthDebug('Max age parameter: ', maxAge)\n    if (!maxAge) return true\n    provAuthDebug('Checking iat claim to prevent old tokens from being passed.')\n    provAuthDebug('Iat claim: ' + token.iat)\n    provAuthDebug('Exp claim: ' + token.exp)\n    const curTime = Date.now() / 1000\n    provAuthDebug('Current_time: ' + curTime)\n    const timePassed = curTime - token.iat\n    provAuthDebug('Time passed: ' + timePassed)\n    if (timePassed > maxAge) throw new Error('TOKEN_TOO_OLD')\n    return true\n  }\n\n  /**\n     * @description Validates Nonce.\n     * @param {Object} token - Id token you wish to validate.\n     */\n  static async validateNonce (token, Database) {\n    provAuthDebug('Validating nonce')\n    provAuthDebug('Nonce: ' + token.nonce)\n\n    if (await Database.Get(false, 'nonce', { nonce: token.nonce })) throw new Error('NONCE_ALREADY_RECEIVED')\n    provAuthDebug('Storing nonce')\n    await Database.Insert(false, 'nonce', { nonce: token.nonce })\n\n    return true\n  }\n\n  /**\n   * @description Validates de token based on the LTI 1.3 core claims specifications.\n   * @param {Object} token - Id token you wish to validate.\n   */\n  static async claimValidation (token) {\n    provAuthDebug('Initiating LTI 1.3 core claims validation')\n\n    provAuthDebug('Checking Message type claim')\n    if (token['https://purl.imsglobal.org/spec/lti/claim/message_type'] !== 'LtiResourceLinkRequest' && token['https://purl.imsglobal.org/spec/lti/claim/message_type'] !== 'LtiDeepLinkingRequest') throw new Error('NO_MESSAGE_TYPE_CLAIM')\n\n    if (token['https://purl.imsglobal.org/spec/lti/claim/message_type'] === 'LtiResourceLinkRequest') {\n      provAuthDebug('Checking Target Link Uri claim')\n      if (!token['https://purl.imsglobal.org/spec/lti/claim/target_link_uri']) throw new Error('NO_TARGET_LINK_URI_CLAIM')\n\n      provAuthDebug('Checking Resource Link Id claim')\n      if (!token['https://purl.imsglobal.org/spec/lti/claim/resource_link'] || !token['https://purl.imsglobal.org/spec/lti/claim/resource_link'].id) throw new Error('NO_RESOURCE_LINK_ID_CLAIM')\n    }\n\n    provAuthDebug('Checking LTI Version claim')\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/version']) throw new Error('NO_LTI_VERSION_CLAIM')\n    if (token['https://purl.imsglobal.org/spec/lti/claim/version'] !== '1.3.0') throw new Error('WRONG_LTI_VERSION_CLAIM')\n\n    provAuthDebug('Checking Deployment Id claim')\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/deployment_id']) throw new Error('NO_DEPLOYMENT_ID_CLAIM')\n\n    provAuthDebug('Checking Sub claim')\n    if (!token.sub) throw new Error('NO_SUB_CLAIM')\n\n    provAuthDebug('Checking Roles claim')\n    if (!token['https://purl.imsglobal.org/spec/lti/claim/roles']) throw new Error('NO_ROLES_CLAIM')\n  }\n\n  /**\n     * @description Gets a new access token from the platform.\n     * @param {String} scopes - Request scopes\n     * @param {Platform} platform - Platform object of the platform you want to access.\n     */\n  static async getAccessToken (scopes, platform, ENCRYPTIONKEY, Database) {\n    const platformUrl = await platform.platformUrl()\n    const clientId = await platform.platformClientId()\n    const confjwt = {\n      sub: clientId,\n      iss: clientId,\n      aud: await platform.platformAuthorizationServer(),\n      jti: encodeURIComponent([...Array(25)].map(_ => (Math.random() * 36 | 0).toString(36)).join``)\n    }\n\n    const token = jwt.sign(confjwt, await platform.platformPrivateKey(), { algorithm: 'RS256', expiresIn: 60, keyid: await platform.platformKid() })\n\n    const message = {\n      grant_type: 'client_credentials',\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      client_assertion: token,\n      scope: scopes\n    }\n\n    provAuthDebug('Awaiting return from the platform')\n    const access = await got.post(await platform.platformAccessTokenEndpoint(), { form: message }).json()\n    provAuthDebug('Successfully generated new access_token')\n\n    await Database.Replace(ENCRYPTIONKEY, 'accesstoken', { platformUrl, clientId, scopes }, { token: access }, { platformUrl, clientId, scopes })\n    return access\n  }\n}\n\nexport default Auth\n"],"mappings":"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","ignoreList":[]}