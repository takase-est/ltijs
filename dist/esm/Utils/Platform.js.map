{"version":3,"file":"Platform.js","names":["Auth","debug","provPlatformDebug","_platformName","_classPrivateFieldLooseKey","_platformUrl","_clientId","_authenticationEndpoint","_authConfig2","_ENCRYPTIONKEY2","_accesstokenEndpoint","_authorizationServer","_kid","_Database","Platform","constructor","name","platformUrl","clientId","authenticationEndpoint","accesstokenEndpoint","authorizationServer","kid","_ENCRYPTIONKEY","_authConfig","Database","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","platformClientId","platformName","Modify","platformId","platformKid","platformActive","active","undefined","platformStatus","Get","id","Replace","platformPublicKey","key","platformPrivateKey","platformAuthConfig","method","Error","authConfig","platformAuthenticationEndpoint","authEndpoint","platformAccessTokenEndpoint","platformAuthorizationServer","platformAccessToken","scopes","result","token","Date","now","createdAt","expires_in","getAccessToken","token_type","charAt","toUpperCase","slice","platformJSON","url","publicKey","delete","Delete","remove","console","log","platformAuthEndpoint"],"sources":["../../../src/esm/Utils/Platform.js"],"sourcesContent":["// Utils\nimport Auth from './Auth.js'\nimport debug from 'debug'\n\nconst provPlatformDebug = debug('provider:platform')\n\n/**\n * @description Class representing a registered platform.\n */\nclass Platform {\n  #platformName\n\n  #platformUrl\n\n  #clientId\n\n  #authenticationEndpoint\n\n  #authConfig\n\n  #ENCRYPTIONKEY\n\n  #accesstokenEndpoint\n\n  #authorizationServer\n\n  #kid\n\n  #Database\n\n  /**\n     * @param {string} name - Platform name.\n     * @param {string} platformUrl - Platform url.\n     * @param {string} clientId - Client Id generated by the platform.\n     * @param {string} authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.\n     * @param {string} accesstokenEndpoint - Access token endpoint for the platform.\n     * @param {string} authorizationServer - Authorization server identifier to be used as the aud when requesting an access token. If not specified, the access token endpoint URL will be used.\n     * @param {string} kid - Key id for local keypair used to sign messages to this platform.\n     * @param {string} _ENCRYPTIONKEY - Encryption key used\n     * @param {Object} _authConfig - Authentication configurations for the platform.\n     */\n  constructor (name, platformUrl, clientId, authenticationEndpoint, accesstokenEndpoint, authorizationServer, kid, _ENCRYPTIONKEY, _authConfig, Database) {\n    this.#authConfig = _authConfig\n    this.#ENCRYPTIONKEY = _ENCRYPTIONKEY\n    this.#platformName = name\n    this.#platformUrl = platformUrl\n    this.#clientId = clientId\n    this.#authenticationEndpoint = authenticationEndpoint\n    this.#accesstokenEndpoint = accesstokenEndpoint\n    this.#authorizationServer = authorizationServer\n    this.#kid = kid\n    this.#Database = Database\n  }\n\n  /**\n   * @description Gets the platform url.\n   */\n  async platformUrl () {\n    return this.#platformUrl\n  }\n\n  /**\n   * @description Gets the platform client id.\n   */\n  async platformClientId () {\n    return this.#clientId\n  }\n\n  /**\n     * @description Sets/Gets the platform name.\n     * @param {string} [name] - Platform name.\n     */\n  async platformName (name) {\n    if (!name) return this.#platformName\n    await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl, clientId: this.#clientId }, { platformName: name })\n    this.#platformName = name\n    return name\n  }\n\n  /**\n     * @description Gets the platform Id.\n     */\n  async platformId () {\n    return this.#kid\n  }\n\n  /**\n   * @description Gets the platform key_id.\n   */\n  async platformKid () {\n    return this.#kid\n  }\n\n  /**\n   * @description Sets/Gets the platform status.\n   * @param {Boolean} [active] - Whether the Platform is active or not.\n   */\n  async platformActive (active) {\n    if (active === undefined) {\n      // Get platform status\n      const platformStatus = await this.#Database.Get(false, 'platformStatus', { id: this.#kid })\n      if (!platformStatus || platformStatus[0].active) return true\n      else return false\n    }\n    await this.#Database.Replace(false, 'platformStatus', { id: this.#kid }, { id: this.#kid, active })\n    return active\n  }\n\n  /**\n     * @description Gets the RSA public key assigned to the platform.\n     *\n     */\n  async platformPublicKey () {\n    const key = await this.#Database.Get(this.#ENCRYPTIONKEY, 'publickey', { kid: this.#kid })\n    return key[0].key\n  }\n\n  /**\n     * @description Gets the RSA private key assigned to the platform.\n     *\n     */\n  async platformPrivateKey () {\n    const key = await this.#Database.Get(this.#ENCRYPTIONKEY, 'privatekey', { kid: this.#kid })\n    return key[0].key\n  }\n\n  /**\n     * @description Sets/Gets the platform authorization configurations used to validate it's messages.\n     * @param {string} method - Method of authorization \"RSA_KEY\" or \"JWK_KEY\" or \"JWK_SET\".\n     * @param {string} key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.\n     */\n  async platformAuthConfig (method, key) {\n    if (!method && !key) return this.#authConfig\n\n    if (method && method !== 'RSA_KEY' && method !== 'JWK_KEY' && method !== 'JWK_SET') throw new Error('INVALID_METHOD. Details: Valid methods are \"RSA_KEY\", \"JWK_KEY\", \"JWK_SET\".')\n\n    const authConfig = {\n      method: method || this.#authConfig.method,\n      key: key || this.#authConfig.key\n    }\n\n    await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl, clientId: this.#clientId }, { authConfig })\n    this.#authConfig = authConfig\n    return authConfig\n  }\n\n  /**\n   * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.\n   * @param {string} [authenticationEndpoint - Platform authentication endpoint.\n   */\n  async platformAuthenticationEndpoint (authenticationEndpoint) {\n    if (!authenticationEndpoint) return this.#authenticationEndpoint\n    await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl, clientId: this.#clientId }, { authEndpoint: authenticationEndpoint })\n    this.#authenticationEndpoint = authenticationEndpoint\n    return authenticationEndpoint\n  }\n\n  /**\n     * @description Sets/Gets the platform access token endpoint used to authenticate messages to the platform.\n     * @param {string} [accesstokenEndpoint] - Platform access token endpoint.\n     */\n  async platformAccessTokenEndpoint (accesstokenEndpoint) {\n    if (!accesstokenEndpoint) return this.#accesstokenEndpoint\n    await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl, clientId: this.#clientId }, { accesstokenEndpoint })\n    this.#accesstokenEndpoint = accesstokenEndpoint\n    return accesstokenEndpoint\n  }\n\n  /**\n   * @description Sets/Gets the platform authorization server identifier used as the aud claim when requesting access tokens.\n   * @param {string} [authorizationServer] - authorization server identifier.\n   */\n  async platformAuthorizationServer (authorizationServer) {\n    if (!authorizationServer) return this.#authorizationServer || this.#accesstokenEndpoint\n    await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl, clientId: this.#clientId }, { authorizationServer })\n    this.#authorizationServer = authorizationServer\n    return authorizationServer\n  }\n\n  /**\n     * @description Gets the platform access token or attempts to generate a new one.\n     * @param {String} scopes - String of scopes.\n     */\n  async platformAccessToken (scopes) {\n    const result = await this.#Database.Get(this.#ENCRYPTIONKEY, 'accesstoken', { platformUrl: this.#platformUrl, clientId: this.#clientId, scopes })\n    let token\n    if (!result || (Date.now() - result[0].createdAt) / 1000 > result[0].token.expires_in) {\n      provPlatformDebug('Valid access_token for ' + this.#platformUrl + ' not found')\n      provPlatformDebug('Attempting to generate new access_token for ' + this.#platformUrl)\n      provPlatformDebug('With scopes: ' + scopes)\n      token = await Auth.getAccessToken(scopes, this, this.#ENCRYPTIONKEY, this.#Database)\n    } else {\n      provPlatformDebug('Access_token found')\n      token = result[0].token\n    }\n    token.token_type = token.token_type.charAt(0).toUpperCase() + token.token_type.slice(1)\n    return token\n  }\n\n  /**\n   * @description Retrieves the platform information as a JSON object.\n   */\n  async platformJSON () {\n    const platformJSON = {\n      id: this.#kid,\n      url: this.#platformUrl,\n      clientId: this.#clientId,\n      name: this.#platformName,\n      authenticationEndpoint: this.#authenticationEndpoint,\n      accesstokenEndpoint: this.#accesstokenEndpoint,\n      authorizationServer: this.#authorizationServer || this.#accesstokenEndpoint,\n      authConfig: this.#authConfig,\n      publicKey: await this.platformPublicKey(),\n      active: await this.platformActive()\n    }\n    return platformJSON\n  }\n\n  /**\n   * @description Deletes a registered platform.\n   */\n  async delete () {\n    await this.#Database.Delete('platform', { platformUrl: this.#platformUrl, clientId: this.#clientId })\n    await this.#Database.Delete('platformStatus', { id: this.#kid })\n    await this.#Database.Delete('publickey', { kid: this.#kid })\n    await this.#Database.Delete('privatekey', { kid: this.#kid })\n    return true\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @deprecated\n   */\n  async remove () {\n    console.log('Deprecation warning: The Platform.remove() method is now deprecated and will be removed in the 6.0 release. Use Platform.delete() instead.')\n    return this.delete()\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.\n   * @param {string} [authenticationEndpoint] - Platform authentication endpoint.\n   * @deprecated\n   */\n  async platformAuthEndpoint (authenticationEndpoint) {\n    return this.platformAuthenticationEndpoint(authenticationEndpoint)\n  }\n}\n\nexport default Platform\n"],"mappings":"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","ignoreList":[]}